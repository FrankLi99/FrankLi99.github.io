<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>maven 总结</title>
    <url>/2019/10/17/maven%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="maven-简洁整理"><a href="#maven-简洁整理" class="headerlink" title="maven 简洁整理"></a>maven 简洁整理</h1><h2 id="依赖包的-scope"><a href="#依赖包的-scope" class="headerlink" title="依赖包的 scope"></a>依赖包的 scope</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn compile / clean /package/ install/ test</span><br><span class="line">&lt;scope&gt; 对应的几个范围, test, provided, runtime, 不推荐 system, compile, import</span><br></pre></td></tr></table></figure>
<h2 id="使用-mvn-命令原型创建普通-java-项目"><a href="#使用-mvn-命令原型创建普通-java-项目" class="headerlink" title="使用 mvn 命令原型创建普通 java 项目"></a>使用 mvn 命令原型创建普通 java 项目</h2><p><code>mvn archetype:generate -DgroupId=com.ghc.generalApp -DartifactId=algorithm -DarchetypeArtifactId=maven-archetype-quickstart</code></p>
<h2 id="使用-mvn-命令原型创建-web-项目"><a href="#使用-mvn-命令原型创建-web-项目" class="headerlink" title="使用 mvn 命令原型创建 web 项目"></a>使用 mvn 命令原型创建 web 项目</h2><p><code>mvn archetype:generate -DgroupId=com.ghc.webapp -DartifactId=microservice -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false</code></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>springboot initializer作为父项目 gav 坐标， name, url, description 等写一写 packaging 方式改为 pom</li>
<li>并干掉不相关的文件目录(.mvn目录、src目录、mvnw及mvnw.cmd文件，最终只留.gitignore和pom.xml)</li>
<li>在父项目中 仅做依赖申明 dependencyManagement， 具体引用由子项目自己去规定</li>
<li>记得将版本号以及编码类型等在 properties 中描述 如(druid.version)</li>
<li>如果父项目 pom 中没有 modules， 则需要添加</li>
<li>将大家都用到的依赖放于 common 模块 <dependencies>xxx 中</dependencies></li>
<li>其他子模块中独有的 依赖 写在自己的 pom 文件中</li>
<li>-DskipTests，不执行测试用例，但编译测试用例类生成相应的class文件至target/test-classes下。<br>-Dmaven.test.skip=true，不执行测试用例，也不编译测试用例类。</li>
<li>application.yml 可以 读取 pom 文件中的 配置， 如 profile , jdbcurl等</li>
</ol>
<p>9.问题:<br>    Maven中optional和scope元素的使用<br>    optional 为 true 则 不传递 依赖， scope 是指传递依赖的范围</p>
<p><img src="https://img2020.cnblogs.com/blog/636379/202110/636379-20211017174527224-1598763753.jpg" alt=""></p>
<p><img src="https://img2020.cnblogs.com/blog/636379/202110/636379-20211017174621737-573146725.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">依赖传递 </span><br><span class="line">路径优先</span><br><span class="line">声明优先</span><br><span class="line"></span><br><span class="line">别人隐藏自己 &lt;optional&gt;true&gt;&lt;/optional&gt;</span><br><span class="line">自己主动排除 &lt;exclusions&gt;...&lt;/exclusions&gt;</span><br><span class="line">设置 jar 的存在范围</span><br><span class="line">&lt;scope&gt;&lt;/scope&gt; 默认 compile </span><br><span class="line">可选 test 如 junit 仅供测试</span><br><span class="line">runtime jdbc 编译器也没法用</span><br><span class="line">provided servlet-api 因为 tomcat 默认带了</span><br><span class="line"></span><br><span class="line">项目构建的生命周期</span><br><span class="line">compile -&gt; test-compile -&gt; test -&gt; package -&gt; install</span><br><span class="line"></span><br><span class="line">mvn 指令 -P 环境定义 id</span><br><span class="line"></span><br><span class="line">mvn install -P pro_env</span><br><span class="line"></span><br><span class="line">mvn install -D skipTests</span><br><span class="line"></span><br><span class="line">mvn clean package -pl module_a -am</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pluginManagement</span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/636379/202110/636379-20211017175931941-204161436.png" alt=""></p>
<p><img src="https://img2020.cnblogs.com/blog/636379/202110/636379-20211017180026519-1488270184.png" alt=""></p>
<p><img src="https://img2020.cnblogs.com/blog/636379/202110/636379-20211017180048971-645207074.png" alt=""></p>
<p><img src="https://img2020.cnblogs.com/blog/636379/202110/636379-20211017180108620-2106069589.png" alt=""></p>
]]></content>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>scala 总结</title>
    <url>/2019/10/17/Scala-%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="scala-简洁整理"><a href="#scala-简洁整理" class="headerlink" title="scala 简洁整理"></a>scala 简洁整理</h1><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ghc.bigdata</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">AdvancedScala</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]):<span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">/*val arr:Array[Int] = (10 to 1 by -1).toArray</span></span><br><span class="line"><span class="comment">    println("before sort arr: " + arr.mkString(","))</span></span><br><span class="line"><span class="comment">    selectSort(arr)</span></span><br><span class="line"><span class="comment">    println("after sort arr: " + arr.mkString(","))</span></span><br><span class="line"><span class="comment">    switchFunc(Array(1, 3, 5))</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">val</span> parentArr : <span class="type">Array</span>[<span class="type">Parent</span>] = <span class="type">Array</span>(<span class="type">Parent</span>(<span class="string">"Frank"</span>, <span class="number">18</span>), <span class="type">Parent</span>(<span class="string">"Tom"</span>, <span class="number">20</span>), <span class="type">Parent</span>(<span class="string">"Ali"</span>, <span class="number">16</span>))</span><br><span class="line">    println(parentArr.mkString(<span class="string">","</span>))</span><br><span class="line"><span class="comment">//    insertSort[Parent](parentArr)</span></span><br><span class="line"><span class="comment">//    heapSort[Parent](parentArr)</span></span><br><span class="line"><span class="comment">//    shellSort[Parent](parentArr)</span></span><br><span class="line"><span class="comment">//    bubbleSort(parentArr)</span></span><br><span class="line"><span class="comment">//    quickSort(parentArr)</span></span><br><span class="line">    mergeSort(parentArr)</span><br><span class="line">    println(parentArr.mkString(<span class="string">","</span>))</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 参数隐式传递的  方法， 如果有默认值用默认值，没有默认值用 implicit 声明的同一类型的值</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">selectSort</span></span>(<span class="keyword">implicit</span> arr: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>)):<span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">for</span>(i &lt;- <span class="number">0</span> to arr.length <span class="number">-1</span> - <span class="number">1</span> ; j&lt;- (i+<span class="number">1</span> to arr.length <span class="number">-1</span>))&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr(i).compareTo(arr(j))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        swap(arr, i, j)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">switchFunc</span></span>(s: <span class="type">Any</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    s <span class="keyword">match</span>&#123;</span><br><span class="line">      <span class="keyword">case</span> a:<span class="type">String</span> =&gt; println(<span class="string">"s 是 字符串"</span>)</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">0</span>,_*) =&gt; println(<span class="string">"s 是以 0 开头的 数组"</span>)</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">1</span>, <span class="number">0</span>) =&gt; println(<span class="string">s"xxx"</span>)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; println(<span class="string">"啥也不是"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">insertSort</span></span>[<span class="type">T</span> &lt;: <span class="type">Comparable</span>[<span class="type">T</span>]](arr: <span class="type">Array</span>[<span class="type">T</span>]):<span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">for</span>(i &lt;- (<span class="number">0</span> to arr.length<span class="number">-1</span>); j&lt;-(i.to(<span class="number">1</span>).by(<span class="number">-1</span>)))&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr(j).compareTo(arr(j<span class="number">-1</span>)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        swapT(arr, j, j<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">swapT</span></span>[<span class="type">T</span> &lt;: <span class="type">Comparable</span>[<span class="type">T</span>]](arr:<span class="type">Array</span>[<span class="type">T</span>], i:<span class="type">Int</span>, j:<span class="type">Int</span>):<span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> tmp: <span class="type">T</span> = arr(i)</span><br><span class="line">    arr(i) = arr(j)</span><br><span class="line">    arr(j) = tmp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">swap</span></span>(arr:<span class="type">Array</span>[<span class="type">Int</span>], i:<span class="type">Int</span>, j:<span class="type">Int</span>):<span class="type">Unit</span> = &#123;</span><br><span class="line">    arr(i) = arr(i) ^ arr(j)</span><br><span class="line">    arr(j) = arr(i) ^ arr(j)</span><br><span class="line">    arr(i) = arr(i) ^ arr(j)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">heapSort</span></span>[<span class="type">T</span> &lt;: <span class="type">Comparable</span>[<span class="type">T</span>]](arr: <span class="type">Array</span>[<span class="type">T</span>]):<span class="type">Unit</span> = &#123;</span><br><span class="line">    buildHeap[<span class="type">T</span>](arr)</span><br><span class="line">    <span class="keyword">for</span>(i &lt;- <span class="type">Range</span>(arr.length <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>))&#123;</span><br><span class="line">      swapT[<span class="type">T</span>](arr, i, <span class="number">0</span>)</span><br><span class="line">      heapify(arr, i, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">heapify</span></span>[<span class="type">T</span> &lt;: <span class="type">Comparable</span>[<span class="type">T</span>]](arr:<span class="type">Array</span>[<span class="type">T</span>], len:<span class="type">Int</span>, index:<span class="type">Int</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">    <span class="keyword">if</span>(index &gt;= len) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> leftChildNode = <span class="number">2</span> * index + <span class="number">1</span></span><br><span class="line">    <span class="keyword">val</span> rightChildNode = <span class="number">2</span> * index + <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> max = index</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(leftChildNode &lt; len &amp;&amp; arr(leftChildNode).compareTo(arr(max)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      max = leftChildNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(rightChildNode &lt; len &amp;&amp; arr(rightChildNode).compareTo(arr(max)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      max = rightChildNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(max != index)&#123;</span><br><span class="line">      swapT(arr, index, max)</span><br><span class="line">      heapify(arr, len, max)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">buildHeap</span></span>[<span class="type">T</span> &lt;:<span class="type">Comparable</span>[<span class="type">T</span>]](arr:<span class="type">Array</span>[<span class="type">T</span>]): <span class="type">Unit</span> =&#123;</span><br><span class="line">    <span class="keyword">val</span> lastChildNode = arr.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">val</span> lastParentNode = (lastChildNode - <span class="number">1</span>) &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span>(i &lt;- lastChildNode to <span class="number">0</span> by <span class="number">-1</span>)&#123;</span><br><span class="line">      heapify(arr, arr.length, i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">shellSort</span></span>[<span class="type">T</span> &lt;: <span class="type">Comparable</span>[<span class="type">T</span>]](arr:<span class="type">Array</span>[<span class="type">T</span>]):<span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> h = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(h &lt; arr.length / <span class="number">3</span>)&#123;</span><br><span class="line">      h = <span class="number">3</span>*h + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(gap &lt;- h to <span class="number">1</span> by <span class="number">-1</span>)&#123;</span><br><span class="line">      <span class="keyword">for</span>(i &lt;- gap until arr.length by <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j &lt;- i to gap by -gap)&#123;</span><br><span class="line">          <span class="keyword">if</span>(arr(j-gap).compareTo(arr(j)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            swapT(arr, j-gap, gap)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">quickSort</span></span>[<span class="type">T</span> &lt;: <span class="type">Comparable</span>[<span class="type">T</span>]](arr:<span class="type">Array</span>[<span class="type">T</span>]):<span class="type">Unit</span> = &#123;</span><br><span class="line">    internalQuickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">internalQuickSort</span></span>[<span class="type">T</span> &lt;: <span class="type">Comparable</span>[<span class="type">T</span>]](arr: <span class="type">Array</span>[<span class="type">T</span>], left:<span class="type">Int</span>, right:<span class="type">Int</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">      <span class="keyword">val</span> pivot:<span class="type">Int</span> = partition(arr, left, right)</span><br><span class="line">      internalQuickSort(arr, <span class="number">0</span>, pivot - <span class="number">1</span>)</span><br><span class="line">      internalQuickSort(arr, pivot + <span class="number">1</span>, right)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">partition</span></span>[<span class="type">T</span> &lt;: <span class="type">Comparable</span>[<span class="type">T</span>]](arr: <span class="type">Array</span>[<span class="type">T</span>], left:<span class="type">Int</span>, right:<span class="type">Int</span>): <span class="type">Int</span> =&#123;</span><br><span class="line">    <span class="keyword">var</span> i = left</span><br><span class="line">    <span class="keyword">var</span> j = right</span><br><span class="line">    <span class="keyword">val</span> pivot = arr(i)</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= j)&#123;</span><br><span class="line">      <span class="keyword">while</span>(i &lt;= j &amp;&amp; arr(j).compareTo(pivot) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        j -= <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      arr(i) = arr(j)</span><br><span class="line">      <span class="keyword">while</span>(i &lt;= j &amp;&amp; pivot.compareTo(arr(i)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      arr(j) = arr(i)</span><br><span class="line">    &#125;</span><br><span class="line">    arr(i) = pivot</span><br><span class="line">    i</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span></span>[<span class="type">T</span> &lt;: <span class="type">Parent</span>](arr: <span class="type">Array</span>[<span class="type">Parent</span>]):<span class="type">Unit</span> = &#123;</span><br><span class="line">    internalMergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">internalMergeSort</span></span>[<span class="type">T</span> &lt;: <span class="type">Comparable</span>[<span class="type">T</span>]](arr: <span class="type">Array</span>[<span class="type">T</span>], left:<span class="type">Int</span>, right:<span class="type">Int</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">      <span class="keyword">val</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">      internalMergeSort(arr, left, mid)</span><br><span class="line">      internalMergeSort(arr, mid+<span class="number">1</span>, right)</span><br><span class="line">      merge(arr, left, mid+<span class="number">1</span>, right)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>[<span class="type">T</span> &lt;: <span class="type">Comparable</span>[<span class="type">T</span>]](arr : <span class="type">Array</span>[<span class="type">T</span>], left:<span class="type">Int</span>, right:<span class="type">Int</span>, rightBounds:<span class="type">Int</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">    <span class="keyword">var</span> i = left</span><br><span class="line">    <span class="keyword">var</span> j = right</span><br><span class="line">    <span class="keyword">var</span> k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> count = rightBounds - left + <span class="number">1</span></span><br><span class="line">    <span class="keyword">val</span> tempArr : <span class="type">Array</span>[<span class="type">T</span>] = <span class="keyword">new</span> <span class="type">Array</span>(count).asInstanceOf[<span class="type">Array</span>[<span class="type">T</span>]]</span><br><span class="line">    <span class="keyword">val</span> mid = right - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= rightBounds)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr(i).compareTo(arr(j)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        tempArr(k) = arr(i)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        tempArr(k) = arr(j)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid)&#123;</span><br><span class="line">      tempArr(k) = arr(i)</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">      k += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= rightBounds)&#123;</span><br><span class="line">      tempArr(k) = arr(j)</span><br><span class="line">      j += <span class="number">1</span></span><br><span class="line">      k += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(m &lt;- <span class="number">0</span> until count)&#123;</span><br><span class="line">      arr(m + left) = tempArr(m)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// T* = 多参数</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span></span>[<span class="type">T</span> &lt;: <span class="type">Comparable</span>[<span class="type">T</span>]](arr: <span class="type">Array</span>[<span class="type">T</span>]):<span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">for</span>(i &lt;- <span class="number">0</span> to arr.length <span class="number">-1</span>)&#123;</span><br><span class="line">      <span class="keyword">for</span>(j &lt;- <span class="number">0</span> until arr.length - <span class="number">1</span> - i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr(j).compareTo(arr(j+<span class="number">1</span>)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">          swapT(arr, j, j+<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(name:<span class="type">String</span>, age:<span class="type">Int</span>):<span class="type">Parent</span> = <span class="keyword">new</span> <span class="type">Parent</span>(name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>(<span class="params">var name:<span class="type">String</span>, var age:<span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Comparable</span>[<span class="type">Parent</span>]</span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">compareTo</span></span>(that: <span class="type">Parent</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.name.compareTo(that.name) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.name.compareTo(that.name) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age - that.age</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>: <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> builder = <span class="keyword">new</span> <span class="type">StringBuilder</span>()</span><br><span class="line">    builder.append(<span class="string">"Person("</span>)</span><br><span class="line">      .append(<span class="keyword">this</span>.name)</span><br><span class="line">      .append(<span class="string">","</span>)</span><br><span class="line">      .append(age)</span><br><span class="line">      .append(<span class="string">")"</span>)</span><br><span class="line">      .toString()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdvancedScala</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>scala</tag>
      </tags>
  </entry>
  <entry>
    <title>python 总结</title>
    <url>/2018/07/11/python-%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><strong><a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">pythonic 风格编码</a></strong></p>
<p><img src="https://images2018.cnblogs.com/blog/636379/201806/636379-20180614180137257-529947281.png" alt=""></p>
<p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">入门python好博客</a><br><a href="https://eastlakeside.gitbooks.io/interpy-zh/content/" target="_blank" rel="noopener">进阶大纲</a><br><a href="http://pythontutor.com/" target="_blank" rel="noopener">有趣的灵魂</a><br><a href="https://github.com/qiwsir/StarterLearningPython" target="_blank" rel="noopener">老齐的教程</a><br><a href="https://github.com/qiwsir/ITArticles" target="_blank" rel="noopener">老齐还整理了很多精华</a><br>听说 fluent python + pro python 这两本书还不错！</p>
<h1 id="元组三种遍历，有点像回字有四种写法一样。。。苦笑"><a href="#元组三种遍历，有点像回字有四种写法一样。。。苦笑" class="headerlink" title="元组三种遍历，有点像回字有四种写法一样。。。苦笑"></a>元组三种遍历，有点像<strong>回</strong>字有四种写法一样。。。苦笑</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for index in range(0,len(tuple_1)):</span><br><span class="line">...     print(tuple_1[index])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; for index in range(0,len(tuple_1)):</span><br><span class="line">...     print(&apos;&#123;&#125;--&#123;&#125;&apos;.format(index,tuple_1[index]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; tuple_1 = (1,2,&apos;hello&apos;,&apos;world&apos;)</span><br><span class="line">&gt;&gt;&gt; for content in tuple_1:</span><br><span class="line">...     print(content)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; for index,enum in enumerate(tuple_1):</span><br><span class="line">...     print(&apos;&#123;&#125;--&#123;&#125;&apos;.format(index,enum))</span><br><span class="line"></span><br><span class="line"># 黑魔法咩？  map ,reduce</span><br><span class="line">from functools import reduce</span><br><span class="line">def str2int(s):</span><br><span class="line">    Digital = &#123;&apos;0&apos;:0,&apos;1&apos;:1,&apos;2&apos;:2,&apos;3&apos;:3,&apos;4&apos;:4,&apos;5&apos;:5,&apos;6&apos;:6,&apos;7&apos;:7,&apos;8&apos;:8,&apos;9&apos;:9&#125;</span><br><span class="line">    return Digital[s]</span><br><span class="line"></span><br><span class="line">def str_reduce(s):</span><br><span class="line">    l = list(map(str2int,s))</span><br><span class="line">    if not isinstance(s, str):</span><br><span class="line">        raise ValueError(&apos;输入不是字符串类型!&apos;)</span><br><span class="line">    return reduce(lambda x,y:x+y,[v * 10**(len(l)-i-1) for  i , v in enumerate(l)])</span><br><span class="line"></span><br><span class="line">str_reduce(&apos;213&apos;)</span><br><span class="line"></span><br><span class="line"># 更加 逆天的 map 用法，不论传入的 list 是普通值 还是 func 都行</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; for i in range(10):</span><br><span class="line">...     print(list(map(lambda x:x(i),[lambda x:x+x,lambda x:x**2])))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># filter 用法</span><br><span class="line">&gt;&gt;&gt; list_1 = [i for i in range(30) if i%2 == 1]</span><br><span class="line">&gt;&gt;&gt; list_1</span><br><span class="line">[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]</span><br><span class="line">&gt;&gt;&gt; list(filter(lambda x:x&lt;10,list_1))</span><br><span class="line">[1, 3, 5, 7, 9]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tuple 互转   tuple(list_1)    ,  list(tuple_2)</span><br><span class="line">&gt;&gt;&gt; import os</span><br><span class="line">&gt;&gt;&gt; print(os.path.abspath(&apos;.&apos;))</span><br><span class="line">C:\Users\FrankLi\Desktop</span><br><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line">&gt;&gt;&gt; print(sys.argv)</span><br><span class="line">[&apos;&apos;]</span><br><span class="line">&gt;&gt;&gt; print(sys.executable)</span><br><span class="line">D:\Program Files (x86)\python\python.exe</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>列表</strong>生成式 vs <strong>生成器</strong>表达式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [x for x in list_1 if x%2==1]</span><br><span class="line">[1, 3, 5]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; (x for x in list_1 if x%2==1)</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at 0x033C2660&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; gen = (x for x in range(0,10) if x%3==1)</span><br><span class="line">&gt;&gt;&gt; for x in gen:</span><br><span class="line">...     print(x)</span><br><span class="line">...</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; #这是一个生成器应用，斐波拉契数列</span><br><span class="line">... def fib(max):</span><br><span class="line">...     n,a,b=0,1,1</span><br><span class="line">...     while n&lt;=max:</span><br><span class="line">...         yield b</span><br><span class="line">...         a,b=b,a+b</span><br><span class="line">...         n=n+1</span><br><span class="line">...     return &apos;Nore More!&apos;</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; for f in fib(6):</span><br><span class="line">...     print(&apos;fib: &#123;&#125;&apos;.format(f))</span><br><span class="line">...</span><br><span class="line">fib: 1</span><br><span class="line">fib: 2</span><br><span class="line">fib: 3</span><br><span class="line">fib: 5</span><br><span class="line">fib: 8</span><br><span class="line">fib: 13</span><br><span class="line">fib: 21</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; def fib(x):</span><br><span class="line">...     a,b = 1,1</span><br><span class="line">...     for i in range(x):</span><br><span class="line">...         yield a</span><br><span class="line">...         a,b = b,a+b</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; for i in fib(10):</span><br><span class="line">...     print(i)</span><br><span class="line">...</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">8</span><br><span class="line">13</span><br><span class="line">21</span><br><span class="line">34</span><br><span class="line">55</span><br><span class="line"></span><br><span class="line">#获取生成器重的 return 返回值 Nore More!</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; g = fib(6)</span><br><span class="line">&gt;&gt;&gt; while True:</span><br><span class="line">...    try:</span><br><span class="line">...        x=next(g)</span><br><span class="line">...        print(&apos;g: &#123;&#125;&apos;.format(x))</span><br><span class="line">...    except StopIteration as e:</span><br><span class="line">...        print(&apos;evalue: &#123;&#125;&apos;.format(e.value))</span><br><span class="line">...        break</span><br><span class="line">...</span><br><span class="line">g: 1</span><br><span class="line">g: 2</span><br><span class="line">g: 3</span><br><span class="line">g: 5</span><br><span class="line">g: 8</span><br><span class="line">g: 13</span><br><span class="line">g: 21</span><br><span class="line">evalue: Nore More!</span><br><span class="line"></span><br><span class="line"># string 也是序列可以被迭代 iter(s) 即可</span><br><span class="line">&gt;&gt;&gt; s = &apos;google&apos;</span><br><span class="line">&gt;&gt;&gt; s_iter = iter(s)</span><br><span class="line">&gt;&gt;&gt; while True:</span><br><span class="line">...     try:</span><br><span class="line">...         print(next(s_iter))</span><br><span class="line">...     except StopIteration as stopIter:</span><br><span class="line">...         print(&apos;done&apos;)</span><br><span class="line">...         break</span><br><span class="line">...</span><br><span class="line">g</span><br><span class="line">o</span><br><span class="line">o</span><br><span class="line">g</span><br><span class="line">l</span><br><span class="line">e</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; # 杨辉三角末尾补零两数相加大法</span><br><span class="line">... def triangle():</span><br><span class="line">...     l=[1]</span><br><span class="line">...     while True:</span><br><span class="line">...         yield l</span><br><span class="line">...         l.append(0)</span><br><span class="line">...         l=[l[i-1]+l[i] for i in range(0,len(l))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">调用杨辉三角生成器</span><br><span class="line">&gt;&gt;&gt; n=0</span><br><span class="line">&gt;&gt;&gt; for e in triangle():</span><br><span class="line">...     n=n+1</span><br><span class="line">...     print(e,&apos;\t&apos;)</span><br><span class="line">...     if n==10:</span><br><span class="line">...         break</span><br><span class="line">...</span><br><span class="line">[1]</span><br><span class="line">[1, 1]</span><br><span class="line">[1, 2, 1]</span><br><span class="line">[1, 3, 3, 1]</span><br><span class="line">[1, 4, 6, 4, 1]</span><br><span class="line">[1, 5, 10, 10, 5, 1]</span><br><span class="line">[1, 6, 15, 20, 15, 6, 1]</span><br><span class="line">[1, 7, 21, 35, 35, 21, 7, 1]</span><br><span class="line">[1, 8, 28, 56, 70, 56, 28, 8, 1]</span><br><span class="line">[1, 9, 36, 84, 126, 126, 84, 36, 9, 1]</span><br></pre></td></tr></table></figure>
<p>迭代器<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Generator 天然的 迭代器 </span><br><span class="line">而  tuple , list 等 序列如果要编程 迭代器 需要 iter(list_1) 、iter(tuple_2)</span><br><span class="line">&gt;&gt;&gt; from collections import Iterator</span><br><span class="line">&gt;&gt;&gt; isinstance((1,2,3,4),Iterator)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; isinstance((x for x in range(10) if x%2==0),Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; isinstance(iter((1,2,3,4)),Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; list_1 = [1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; list_1_iter = iter(list_1)</span><br><span class="line">&gt;&gt;&gt; while True:</span><br><span class="line">...     try:</span><br><span class="line">...         x=next(list_1_iter)</span><br><span class="line">...         print(&apos;x:&#123;&#125;&apos;.format(x))</span><br><span class="line">...     except StopIteration as e:</span><br><span class="line">...         print(&apos;e.value: &#123;&#125;&apos;.format(e.value))</span><br><span class="line">...         break</span><br><span class="line">...</span><br><span class="line">x:1</span><br><span class="line">x:2</span><br><span class="line">x:3</span><br><span class="line">x:4</span><br><span class="line">e.value: None</span><br></pre></td></tr></table></figure></p>
<ul>
<li>python map reduce 实现</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def pow2(val):</span><br><span class="line">...     return val**2</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; list_1 = [1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; list(map(pow2,list_1))</span><br><span class="line">[1, 4, 9, 16, 25]</span><br><span class="line">&gt;&gt;&gt; def sum(x,y):</span><br><span class="line">...     return x+y</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; from functools import reduce</span><br><span class="line">&gt;&gt;&gt; reduce(sum,list(map(pow2,list_1)))</span><br><span class="line">55</span><br><span class="line"></span><br><span class="line">强悍的 lambda</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from functools import reduce</span><br><span class="line">&gt;&gt;&gt; reduce(lambda x,y:x+y,list(map(lambda x:x**2,[1,2,3,4,5,6,7])))</span><br></pre></td></tr></table></figure>
<ul>
<li>注意区别 Iterable  可迭代 与 Iterator   惰性迭代器</li>
</ul>
<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def lazy_sum(*args):</span><br><span class="line">...     def sum():</span><br><span class="line">...         ax=0</span><br><span class="line">...         for n in args:</span><br><span class="line">...          ax=ax+n</span><br><span class="line">...         return ax</span><br><span class="line">...     return sum</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; lazy_sum(1,2,3,4,5)</span><br><span class="line">&lt;function lazy_sum.&lt;locals&gt;.sum at 0x013902B8&gt;</span><br><span class="line">&gt;&gt;&gt; f=lazy_sum(1,2,3,4,5)</span><br><span class="line">&gt;&gt;&gt; f()</span><br><span class="line">15</span><br></pre></td></tr></table></figure>
<p>##win 下 python 清屏<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import os</span><br><span class="line">&gt;&gt;&gt; def clear():</span><br><span class="line">...     os.system(&apos;cls&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; import os</span><br><span class="line">&gt;&gt;&gt; def cls():</span><br><span class="line">...     if os.name.upper() == &apos;NT&apos;:</span><br><span class="line">...         os.system(&apos;cls&apos;)</span><br><span class="line">...     else:</span><br><span class="line">...         os.system(&apos;clear&apos;)</span><br></pre></td></tr></table></figure></p>
<h2 id="可变参数，巧调用"><a href="#可变参数，巧调用" class="headerlink" title="可变参数，巧调用"></a>可变参数，巧调用</h2><p>##python的可变参数和关键字参数(*args **kw)</p>
<p>##<a href="https://www.jianshu.com/p/98f7e34845b5" target="_blank" rel="noopener">讲*args 可变参数, **kw 关键字参数非常好的文章</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def test(*args):</span><br><span class="line">...     sum=0</span><br><span class="line">...     for n in args:</span><br><span class="line">...         sum=sum+n</span><br><span class="line">...     return sum</span><br><span class="line">... test([1,2,3,4])</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 6</span><br><span class="line">    test([1,2,3,4])</span><br><span class="line">       ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line">&gt;&gt;&gt; test(*[1,2,3,4])</span><br><span class="line">10</span><br><span class="line">&gt;&gt;&gt; test(1,2,3,4)</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在 python3 中已经废除了 dict 的 has_key 方法 用  key in dict 这种方式代替</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; def person(*args,**kw):</span><br><span class="line">...     l=[]</span><br><span class="line">...     for n in args:</span><br><span class="line">...         l.append(n)</span><br><span class="line">...     dic=kw</span><br><span class="line">...     if &apos;city&apos; in dic:</span><br><span class="line">...         pass</span><br><span class="line">...     if &apos;job&apos; in dic:</span><br><span class="line">...         pass</span><br><span class="line">...     print(&apos;l:&#123;&#125; dic &#123;&#125;&apos;.format(l,dic))</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; person(&apos;tom&apos;,2,city=&apos;changsha&apos;,job=&apos;unknown&apos;)</span><br><span class="line">l:[&apos;tom&apos;, 2] dic &#123;&apos;city&apos;: &apos;changsha&apos;, &apos;job&apos;: &apos;unknown&apos;&#125;</span><br><span class="line"></span><br><span class="line">进阶</span><br><span class="line">&gt;&gt;&gt; extra = &#123;&apos;city&apos;:&apos;cs&apos;,&apos;job&apos;:&apos;developer&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; tuple=(&apos;tom&apos;,30)</span><br><span class="line">&gt;&gt;&gt; person(*tuple,**extra)</span><br><span class="line">l:[&apos;tom&apos;, 30] dic &#123;&apos;city&apos;: &apos;cs&apos;, &apos;job&apos;: &apos;developer&apos;&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>##装饰器类似于 java 里的 AOP <strong>动态代理</strong>,或者<strong>继承组合</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import functools</span><br><span class="line">&gt;&gt;&gt; #自定义文本消息的事务装饰器</span><br><span class="line">... def trans(text):</span><br><span class="line">...     def decorater(func):</span><br><span class="line">...         @functools.wraps(func)</span><br><span class="line">...         def wrapper(*args,**kw):</span><br><span class="line">...             print(&apos;&#123;&#125; &#123;&#125;&apos;.format(text,func.__name__))</span><br><span class="line">...             return func(*args,**kw)</span><br><span class="line">...         return wrapper</span><br><span class="line">...     return decorater</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; @trans(&apos;开启事务&apos;):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1</span><br><span class="line">    @trans(&apos;开启事务&apos;):</span><br><span class="line">                  ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line">&gt;&gt;&gt; @trans(&apos;开启事务&apos;)</span><br><span class="line">... def trans_func():</span><br><span class="line">...     print(&apos;我是一个要被事务装饰的函数&apos;)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; trans_func()</span><br><span class="line">开启事务 trans_func</span><br><span class="line">我是一个要被事务装饰的函数</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from functools import wraps</span><br><span class="line">&gt;&gt;&gt; def my_decorator(func):</span><br><span class="line">...     @wraps(func)</span><br><span class="line">...     def wrap_func():</span><br><span class="line">...         print(&apos;before...&apos;)</span><br><span class="line">...         func()</span><br><span class="line">...         print(&apos;after...&apos;)</span><br><span class="line">...     return wrap_func</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; @my_decorator</span><br><span class="line">... def func_a():</span><br><span class="line">...     print(&apos;func_a...&apos;)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; func_a()</span><br><span class="line">before...</span><br><span class="line">func_a...</span><br><span class="line">after...</span><br><span class="line">&gt;&gt;&gt; func_a.__name__</span><br><span class="line">&apos;func_a&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from functools import wraps</span><br><span class="line">&gt;&gt;&gt; def custom_text(text):</span><br><span class="line">...     def decorater(func):</span><br><span class="line">...         @wraps(func)</span><br><span class="line">...         def wrap_decorated(*args,**kwargs):</span><br><span class="line">...             print(&apos;&#123;&#125; &#123;&#125;&apos;.format(text,func.__name__))</span><br><span class="line">...             return func(*args,**kwargs)</span><br><span class="line">...         return wrap_decorated</span><br><span class="line">...     return decorater</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; @custom_text(&apos;自定义文本信息...&apos;)</span><br><span class="line">... def tran(*args,**kwargs):</span><br><span class="line">...     for i in args:</span><br><span class="line">...         print(i,end=&apos;,&apos;)</span><br><span class="line">...     for key,value in kwargs.items():</span><br><span class="line">...         print(&apos;&#123;&#125;--&gt;&#123;&#125;&apos;.format(key,value))</span><br><span class="line">...     print(&apos;事务...社会...&apos;)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; args = (1,&apos;abc&apos;,3)</span><br><span class="line">&gt;&gt;&gt; from functools import wraps</span><br><span class="line">&gt;&gt;&gt; kwargs = dict(name=&apos;Frank&apos;,age=18)</span><br><span class="line">&gt;&gt;&gt; tran(*args,**kwargs)</span><br><span class="line">自定义文本信息... tran</span><br><span class="line">1,abc,3,name--&gt;Frank</span><br><span class="line">age--&gt;18</span><br><span class="line">事务...社会...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line">class LogIt(object):</span><br><span class="line">    def __init__(self,log_file=&apos;out.log&apos;):</span><br><span class="line">        self._log_file = log_file</span><br><span class="line">        </span><br><span class="line">    @property</span><br><span class="line">    def log_file(self):</span><br><span class="line">        return self._log_file</span><br><span class="line">    @log_file.setter</span><br><span class="line">    def log_file(self,log_file):</span><br><span class="line">        self._log_file = log_file</span><br><span class="line">    def __call__(self,func):</span><br><span class="line">        @wraps(func)</span><br><span class="line">        def wrap_func(*args,**kwargs):</span><br><span class="line">            log_string = &apos;&#123;&#125; &#123;&#125;&apos;.format(func.__name__,&apos;called...&apos;)</span><br><span class="line">            print(&apos;wrap_func logging...&#123;&#125;&apos;+log_string)</span><br><span class="line">            with open(self.log_file,&apos;a&apos;) as logfile:</span><br><span class="line">                logfile.write(log_string+&apos;\n&apos;)</span><br><span class="line">            self.notify(log_string)</span><br><span class="line">            return func(*args,**kwargs)</span><br><span class="line">        return wrap_func</span><br><span class="line">    def notify(self,log_string):</span><br><span class="line">        print(&apos;notify logging...&#123;&#125;&apos;.format(log_string))</span><br><span class="line"></span><br><span class="line">@LogIt(&apos;out1.log&apos;)</span><br><span class="line">def trans(*args,**kwargs):</span><br><span class="line">    for i in args:</span><br><span class="line">        print(i,end=&apos;,&apos;)</span><br><span class="line">    for key,value in kwargs.items():</span><br><span class="line">        pritn(&apos;&#123;&#125;&lt;--&gt;&#123;&#125;&apos;.format(key,value))</span><br><span class="line">        </span><br><span class="line">args = (&apos;trans start..&apos;,1,2,&apos;test&apos;)</span><br><span class="line">kwargs = dict(name=&apos;Frank&apos;,age=18)</span><br><span class="line">trans(*args,*kwargs)</span><br><span class="line"></span><br><span class="line">wrap_func logging...&#123;&#125;trans called...</span><br><span class="line">notify logging...trans called...</span><br><span class="line">trans start..,1,2,test,name,age,</span><br></pre></td></tr></table></figure></p>
<p>##偏函数，可以见 <strong>functools</strong> 多么强大值得好好学学<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; convert_int_from_8 = functools.partial(int,base=8)</span><br><span class="line">&gt;&gt;&gt; convert_int_from_8(12345)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: int() can&apos;t convert non-string with explicit base</span><br><span class="line">&gt;&gt;&gt; convert_int_from_8(&apos;12345&apos;)</span><br><span class="line">5349</span><br><span class="line"></span><br><span class="line"># kw 这种 dict 传值也是可以的</span><br><span class="line">&gt;&gt;&gt; kw = &#123;&apos;base&apos;:8&#125;</span><br><span class="line">&gt;&gt;&gt; convert_int_from_8 = functools.partial(int,base)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: name &apos;base&apos; is not defined</span><br><span class="line">&gt;&gt;&gt; convert_int_from_8 = functools.partial(int,**kw)</span><br><span class="line">&gt;&gt;&gt; convert_int_from_8(&apos;123456&apos;)</span><br><span class="line"></span><br><span class="line">最后，创建偏函数时，实际上可以接收函数对象、*args和**kw这3个参数，当传入：</span><br><span class="line"></span><br><span class="line">int2 = functools.partial(int, base=2)</span><br><span class="line">实际上固定了int()函数的关键字参数base，也就是：</span><br><span class="line"></span><br><span class="line">int2(&apos;10010&apos;)</span><br><span class="line">相当于：</span><br><span class="line"></span><br><span class="line">kw = &#123; &apos;base&apos;: 2 &#125;</span><br><span class="line">int(&apos;10010&apos;, **kw)</span><br><span class="line">当传入：</span><br><span class="line"></span><br><span class="line">max2 = functools.partial(max, 10)</span><br><span class="line">实际上会把10作为*args的一部分自动加到左边，也就是：</span><br><span class="line"></span><br><span class="line">max2(5, 6, 7)</span><br><span class="line">相当于：</span><br><span class="line"></span><br><span class="line">args = (10, 5, 6, 7)</span><br><span class="line">max(*args)</span><br><span class="line">结果为10。</span><br><span class="line"></span><br><span class="line"># 总结 就是 偏函数 其实就是把原本参数很多的函数简化参数，便于使用</span><br><span class="line">#当函数的参数个数太多，需要简化时，使用functools.partial可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单</span><br></pre></td></tr></table></figure></p>
<p>##模块<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&apos;test module&apos;</span><br><span class="line">__author__ = &apos;Frank Li&apos;</span><br><span class="line">import sys</span><br><span class="line">def test():</span><br><span class="line">    args=sys.argv</span><br><span class="line">    if len(args)==1:</span><br><span class="line">        print(&apos;hello world!&apos;)</span><br><span class="line">    elif len(args)==2:</span><br><span class="line">        print(&apos;hello &#123;&#125;&apos;.format(args[1]))</span><br><span class="line">    else:</span><br><span class="line">        print(&apos;to many args!&apos;)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure></p>
<p>##模块搜索路径<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认情况下，Python解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在sys模块的path变量中：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line">&gt;&gt;&gt; sys.path</span><br><span class="line">[&apos;&apos;, &apos;/Library/Frameworks/Python.framework/Versions/3.6/lib/python36.zip&apos;, &apos;/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6&apos;, ..., &apos;/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages&apos;]</span><br><span class="line">如果我们要添加自己的搜索目录，有两种方法：</span><br><span class="line"></span><br><span class="line">一是直接修改sys.path，添加要搜索的目录：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line">&gt;&gt;&gt; sys.path.append(&apos;/Users/michael/my_py_scripts&apos;)</span><br><span class="line">这种方法是在运行时修改，运行结束后失效。</span><br><span class="line"></span><br><span class="line">第二种方法是设置环境变量PYTHONPATH，该环境变量的内容会被自动添加到模块搜索路径中。设置方式与设置Path环境变量类似。注意只需要添加你自己的搜索路径，Python自己本身的搜索路径不受影响。</span><br></pre></td></tr></table></figure></p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class Test(object):</span><br><span class="line">...     def __init__(self,*args):</span><br><span class="line">...         self.name,self.age=args[0],args[1]</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; t = Test(&apos;frank&apos;,18)</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">&lt;__main__.Test object at 0x02F00AB0&gt;</span><br><span class="line">&gt;&gt;&gt; t.name</span><br><span class="line">&apos;frank&apos;</span><br><span class="line">&gt;&gt;&gt; t.age</span><br><span class="line">18</span><br></pre></td></tr></table></figure>
<p>##再进一阶<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class Person(object):</span><br><span class="line">...     def __init__(self,name,age,*args,**kw):</span><br><span class="line">...         self.name,self.age = name,age</span><br><span class="line">...         for arg in args:</span><br><span class="line">...             print(&apos;arg: &#123;&#125;&apos;.format(arg))</span><br><span class="line">...         for key in kw:</span><br><span class="line">...             print(&apos;key: &#123;&#125;--&gt; value: &#123;&#125;&apos;.format(key,kw[key]))</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; args=(&apos;a&apos;,1,2,&apos;b&apos;)</span><br><span class="line">&gt;&gt;&gt; kw =&#123;&apos;city&apos;:&apos;changsha&apos;,&apos;job&apos;:&apos;developer&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; Person(&apos;frank&apos;,18,*args,**kw)</span><br><span class="line">arg: a</span><br><span class="line">arg: 1</span><br><span class="line">arg: 2</span><br><span class="line">arg: b</span><br><span class="line">key: city--&gt; value: changsha</span><br><span class="line">key: job--&gt; value: developer</span><br><span class="line">&lt;__main__.Person object at 0x02F00DD0&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; class Student(object):</span><br><span class="line">...     def __init__(self,name,score,*args,**kw):</span><br><span class="line">...         self.name,self.score = name,score</span><br><span class="line">...         for arg in args:</span><br><span class="line">...             print(&apos;arg: &#123;&#125;&apos;.format(arg))</span><br><span class="line">...         for key in kw:</span><br><span class="line">...             if key==&apos;city&apos;:</span><br><span class="line">...                 self.city =kw[key]</span><br><span class="line">...             elif key==&apos;job&apos;:</span><br><span class="line">...                 self.job=kw[key]</span><br><span class="line">...             else:</span><br><span class="line">...                 pring(&apos;key: &#123;&#125; --&gt; value: &#123;&#125;&apos;.format(key,kw[key]))</span><br><span class="line">...     def get_grade(self):</span><br><span class="line">...             if  self.score &gt;= 90:</span><br><span class="line">...                 return &apos;优&apos;</span><br><span class="line">...             if 70&lt;self.score&lt;90:</span><br><span class="line">...                 return &apos;良&apos;</span><br><span class="line">...             elif 60&lt;self.score&lt;=70:</span><br><span class="line">...                 return &apos;几个&apos;</span><br><span class="line">...             else:</span><br><span class="line">...                 return &apos;不及格&apos;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; student = Student(&apos;frank&apos;,80,*args,**kw)</span><br><span class="line">arg: a</span><br><span class="line">arg: 1</span><br><span class="line">arg: 2</span><br><span class="line">arg: 3</span><br><span class="line">arg: c</span><br><span class="line">arg: d</span><br><span class="line">&gt;&gt;&gt; student.city</span><br><span class="line">&apos;changsha&apos;</span><br><span class="line">&gt;&gt;&gt; student.get_grade()</span><br><span class="line">&apos;良&apos;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">区别于 java 这种静态语言 , python 是动态语言</span><br><span class="line">小结</span><br><span class="line">类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；</span><br><span class="line"></span><br><span class="line">方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；</span><br><span class="line"></span><br><span class="line">通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。</span><br><span class="line"></span><br><span class="line">和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; bart = Student(&apos;Bart Simpson&apos;, 59)</span><br><span class="line">&gt;&gt;&gt; lisa = Student(&apos;Lisa Simpson&apos;, 87)</span><br><span class="line">&gt;&gt;&gt; bart.age = 8</span><br><span class="line">&gt;&gt;&gt; bart.age</span><br><span class="line">8</span><br><span class="line">&gt;&gt;&gt; lisa.age</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &apos;Student&apos; object has no attribute &apos;age&apos;</span><br></pre></td></tr></table></figure></p>
<h3 id="访问权限控制"><a href="#访问权限控制" class="headerlink" title="访问权限控制"></a>访问权限控制</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">此方法不推荐， 应该用 set_gender() 而不是 bart._Student__gender 这种方式修改 gender 属性</span><br><span class="line">&gt;&gt;&gt; class Student(object):</span><br><span class="line">...     def __init__(self,name,gender):</span><br><span class="line">...         self.name=name</span><br><span class="line">...         self.__gender=gender</span><br><span class="line">...     def get_gender(self):</span><br><span class="line">...         return self.__gender</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; bart = Student(&apos;Bart&apos;, &apos;male&apos;)</span><br><span class="line">&gt;&gt;&gt; if bart.get_gender() != &apos;male&apos;:</span><br><span class="line">...     print(&apos;测试失败!&apos;)</span><br><span class="line">... else:</span><br><span class="line">...     bart._Student__gender=&apos;female&apos;</span><br><span class="line">...     if bart.get_gender() != &apos;female&apos;:</span><br><span class="line">...         print(&apos;测试失败!&apos;)</span><br><span class="line">...     else:</span><br><span class="line">...         print(&apos;测试成功！&apos;)</span><br><span class="line">...</span><br><span class="line">测试成功！</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">正确做法：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; class Student(object):</span><br><span class="line">...     def __init__(self,name,gender):</span><br><span class="line">...         self.name,self.__gender=name,gender</span><br><span class="line">...     def set_gender(self,gender):</span><br><span class="line">...         self.__gender = gender</span><br><span class="line">...     def get_gender(self):</span><br><span class="line">...         return self.__gender</span><br><span class="line"></span><br><span class="line"># 测试</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; bart = Student(&apos;Bart&apos;,&apos;male&apos;)</span><br><span class="line">&gt;&gt;&gt; if bart.get_gender() != &apos;male&apos;:</span><br><span class="line">...     print(&apos;测试失败~!&apos;)</span><br><span class="line">... else:</span><br><span class="line">...     bart.set_gender(&apos;female&apos;)</span><br><span class="line">...     if bart.get_gender() != &apos;female&apos;:</span><br><span class="line">...         print(&apos;测试失败!&apos;)</span><br><span class="line">...     else:</span><br><span class="line">...         print(&apos;测试成功~!&apos;)</span><br><span class="line">...</span><br><span class="line">测试成功~!</span><br></pre></td></tr></table></figure>
<h2 id="以为是多态，然而是多态，更不止是多态，-只要有-run-方法的-对象-都可以-往里丢-，这一点注意区分-java-的-接口以及父类"><a href="#以为是多态，然而是多态，更不止是多态，-只要有-run-方法的-对象-都可以-往里丢-，这一点注意区分-java-的-接口以及父类" class="headerlink" title="以为是多态，然而是多态，更不止是多态， 只要有 run 方法的 对象 都可以 往里丢 ，这一点注意区分 java 的 接口以及父类"></a>以为是多态，然而是多态，更不止是多态， 只要有 run 方法的 对象 都可以 往里丢 ，这一点注意区分 java 的 接口以及父类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class Animal(object):</span><br><span class="line">...     def run(self):</span><br><span class="line">...         print(&apos;animal is running...&apos;)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; class Dog(Animal):</span><br><span class="line">...     def run(self):</span><br><span class="line">...         print(&apos;dog is running...&apos;)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; def run_twice(animal):</span><br><span class="line">...     animal.run()</span><br><span class="line">...     animal.run()</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; run_twice(Animal())</span><br><span class="line">animal is running...</span><br><span class="line">animal is running...</span><br><span class="line">&gt;&gt;&gt; run_twice(Dog())</span><br><span class="line">dog is running...</span><br><span class="line">dog is running...</span><br><span class="line"></span><br><span class="line"># 逝者如斯，东流不回 ，水不继承自 Animal 类 依旧可以 往 run_twice 这个方法里丢， 在 java 里是编译错误！！！</span><br><span class="line">&gt;&gt;&gt; class water(object):</span><br><span class="line">...     def run(self):</span><br><span class="line">...         print(&apos;water is running....and never back...&apos;)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; run_twice(water())</span><br><span class="line">water is running....and never back...</span><br><span class="line">water is running....and never back...</span><br></pre></td></tr></table></figure>
<h3 id="类型判断-type-vs-isinstance-》-isinstance-胜-！！！-总是优先使用-isinstance-判断"><a href="#类型判断-type-vs-isinstance-》-isinstance-胜-！！！-总是优先使用-isinstance-判断" class="headerlink" title="类型判断  type vs isinstance   ==》  isinstance 胜 ！！！ 总是优先使用 isinstance 判断"></a>类型判断  type vs isinstance   ==》  isinstance 胜 ！！！ 总是优先使用 isinstance 判断</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; type(123) == int</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(123,int)</span><br><span class="line">True</span><br><span class="line"></span><br><span class="line">下面这种判断太过于复杂</span><br><span class="line">判断基本数据类型可以直接写int，str等，但如果要判断一个对象是否是函数怎么办？可以使用types模块中定义的常量：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; import types</span><br><span class="line">&gt;&gt;&gt; def fn():</span><br><span class="line">...     pass</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; type(fn)==types.FunctionType</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type(abs)==types.BuiltinFunctionType</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type(lambda x: x)==types.LambdaType</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type((x for x in range(10)))==types.GeneratorType</span><br><span class="line">True</span><br><span class="line"></span><br><span class="line">并且还可以判断一个变量是否是某些类型中的一种，比如下面的代码就可以判断是否是list或者tuple：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; isinstance([1, 2, 3], (list, tuple))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance((1, 2, 3), (list, tuple))</span><br><span class="line">True</span><br><span class="line">总是优先使用isinstance()判断类型，可以将指定类型及其子类“一网打尽”。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># dir 查看，然后等价</span><br><span class="line">&gt;&gt;&gt; len(&apos;ABC&apos;)                                                                                                          3                                                                                                                       &gt;&gt;&gt; dir(&apos;ABC&apos;)                                                                                                          [&apos;__add__&apos;, &apos;__class__&apos;, &apos;__contains__&apos;, &apos;__delattr__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__getitem__&apos;, &apos;__getnewargs__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__iter__&apos;, &apos;__le__&apos;, &apos;__len__&apos;, &apos;__lt__&apos;, &apos;__mod__&apos;, &apos;__mul__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__rmod__&apos;, &apos;__rmul__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;capitalize&apos;, &apos;casefold&apos;, &apos;center&apos;, &apos;count&apos;, &apos;encode&apos;, &apos;endswith&apos;, &apos;expandtabs&apos;, &apos;find&apos;, &apos;format&apos;, &apos;format_map&apos;, &apos;index&apos;, &apos;isalnum&apos;, &apos;isalpha&apos;, &apos;isdecimal&apos;, &apos;isdigit&apos;, &apos;isidentifier&apos;, &apos;islower&apos;, &apos;isnumeric&apos;, &apos;isprintable&apos;, &apos;isspace&apos;, &apos;istitle&apos;, &apos;isupper&apos;, &apos;join&apos;, &apos;ljust&apos;, &apos;lower&apos;, &apos;lstrip&apos;, &apos;maketrans&apos;, &apos;partition&apos;, &apos;replace&apos;, &apos;rfind&apos;, &apos;rindex&apos;, &apos;rjust&apos;, &apos;rpartition&apos;, &apos;rsplit&apos;, &apos;rstrip&apos;, &apos;split&apos;, &apos;splitlines&apos;, &apos;startswith&apos;, &apos;strip&apos;, &apos;swapcase&apos;, &apos;title&apos;, &apos;translate&apos;, &apos;upper&apos;, &apos;zfill&apos;] </span><br><span class="line"></span><br><span class="line"># 创建自己的 len 方法， 自己写一个 __len__()  方法就是了</span><br><span class="line">&gt;&gt;&gt; class myStr():</span><br><span class="line">...     def __init__(self,val):</span><br><span class="line">...         self.__val = val</span><br><span class="line">...     def __len__(self):</span><br><span class="line">...         return len(self.__val)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; myStr(&apos;abc&apos;)</span><br><span class="line">&lt;__main__.myStr object at 0x02F363D0&gt;</span><br><span class="line">&gt;&gt;&gt; len(myStr(&apos;abc&apos;))</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"># 查看 python 内建函数</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; dir(__builtins__)</span><br><span class="line">[&apos;ArithmeticError&apos;, &apos;AssertionError&apos;, &apos;AttributeError&apos;, &apos;BaseException&apos;, &apos;BlockingIOError&apos;, &apos;BrokenPipeError&apos;, &apos;BufferError&apos;, &apos;BytesWarning&apos;, &apos;ChildProcessError&apos;, &apos;ConnectionAbortedError&apos;, &apos;ConnectionError&apos;, &apos;ConnectionRefusedError&apos;, &apos;ConnectionResetError&apos;, &apos;DeprecationWarning&apos;, &apos;EOFError&apos;, &apos;Ellipsis&apos;, &apos;EnvironmentError&apos;, &apos;Exception&apos;, &apos;False&apos;, &apos;FileExistsError&apos;, &apos;FileNotFoundError&apos;, &apos;FloatingPointError&apos;, &apos;FutureWarning&apos;, &apos;GeneratorExit&apos;, &apos;IOError&apos;, &apos;ImportError&apos;, &apos;ImportWarning&apos;, &apos;IndentationError&apos;, &apos;IndexError&apos;, &apos;InterruptedError&apos;, &apos;IsADirectoryError&apos;, &apos;KeyError&apos;, &apos;KeyboardInterrupt&apos;, &apos;LookupError&apos;, &apos;MemoryError&apos;, &apos;ModuleNotFoundError&apos;, &apos;NameError&apos;, &apos;None&apos;, &apos;NotADirectoryError&apos;, &apos;NotImplemented&apos;, &apos;NotImplementedError&apos;, &apos;OSError&apos;, &apos;OverflowError&apos;, &apos;PendingDeprecationWarning&apos;, &apos;PermissionError&apos;, &apos;ProcessLookupError&apos;, &apos;RecursionError&apos;, &apos;ReferenceError&apos;, &apos;ResourceWarning&apos;, &apos;RuntimeError&apos;, &apos;RuntimeWarning&apos;, &apos;StopAsyncIteration&apos;, &apos;StopIteration&apos;, &apos;SyntaxError&apos;, &apos;SyntaxWarning&apos;, &apos;SystemError&apos;, &apos;SystemExit&apos;, &apos;TabError&apos;, &apos;TimeoutError&apos;, &apos;True&apos;, &apos;TypeError&apos;, &apos;UnboundLocalError&apos;, &apos;UnicodeDecodeError&apos;, &apos;UnicodeEncodeError&apos;, &apos;UnicodeError&apos;, &apos;UnicodeTranslateError&apos;, &apos;UnicodeWarning&apos;, &apos;UserWarning&apos;, &apos;ValueError&apos;, &apos;Warning&apos;, &apos;WindowsError&apos;, &apos;ZeroDivisionError&apos;, &apos;_&apos;, &apos;__build_class__&apos;, &apos;__debug__&apos;, &apos;__doc__&apos;, &apos;__import__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;abs&apos;, &apos;all&apos;, &apos;any&apos;, &apos;ascii&apos;, &apos;bin&apos;, &apos;bool&apos;, &apos;bytearray&apos;, &apos;bytes&apos;, &apos;callable&apos;, &apos;chr&apos;, &apos;classmethod&apos;, &apos;compile&apos;, &apos;complex&apos;, &apos;copyright&apos;, &apos;credits&apos;, &apos;delattr&apos;, &apos;dict&apos;, &apos;dir&apos;, &apos;divmod&apos;, &apos;enumerate&apos;, &apos;eval&apos;, &apos;exec&apos;, &apos;exit&apos;, &apos;filter&apos;, &apos;float&apos;, &apos;format&apos;, &apos;frozenset&apos;, &apos;getattr&apos;, &apos;globals&apos;, &apos;hasattr&apos;, &apos;hash&apos;, &apos;help&apos;, &apos;hex&apos;, &apos;id&apos;, &apos;input&apos;, &apos;int&apos;, &apos;isinstance&apos;, &apos;issubclass&apos;, &apos;iter&apos;, &apos;len&apos;, &apos;license&apos;, &apos;list&apos;, &apos;locals&apos;, &apos;map&apos;, &apos;max&apos;, &apos;memoryview&apos;, &apos;min&apos;, &apos;next&apos;, &apos;object&apos;, &apos;oct&apos;, &apos;open&apos;, &apos;ord&apos;, &apos;pow&apos;, &apos;print&apos;, &apos;property&apos;, &apos;quit&apos;, &apos;range&apos;, &apos;repr&apos;, &apos;reversed&apos;, &apos;round&apos;, &apos;set&apos;, &apos;setattr&apos;, &apos;slice&apos;, &apos;sorted&apos;, &apos;staticmethod&apos;, &apos;str&apos;, &apos;sum&apos;, &apos;super&apos;, &apos;tuple&apos;, &apos;type&apos;, &apos;vars&apos;, &apos;zip&apos;]</span><br><span class="line"></span><br><span class="line"># 查看一波</span><br><span class="line">&gt;&gt;&gt; &apos;hasattr&apos; in dir(__builtins__)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &apos;getattr&apos; in dir(__builtins__)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">小结</span><br><span class="line">通过内置的一系列函数，我们可以对任意一个Python对象进行剖析，拿到其内部的数据。要注意的是，只有在不知道对象信息的时候，我们才会去获取对象信息。如果可以直接写：</span><br><span class="line"></span><br><span class="line">sum = obj.x + obj.y</span><br><span class="line">就不要写：</span><br><span class="line"></span><br><span class="line">sum = getattr(obj, &apos;x&apos;) + getattr(obj, &apos;y&apos;)</span><br><span class="line">一个正确的用法的例子如下：</span><br><span class="line"></span><br><span class="line">def readImage(fp):</span><br><span class="line">    if hasattr(fp, &apos;read&apos;):</span><br><span class="line">        return readData(fp)</span><br><span class="line">    return None</span><br><span class="line">假设我们希望从文件流fp中读取图像，我们首先要判断该fp对象是否存在read方法，如果存在，则该对象是一个流，如果不存在，则无法读取。hasattr()就派上了用场。</span><br><span class="line"></span><br><span class="line">请注意，在Python这类动态语言中，根据鸭子类型，有read()方法，不代表该fp对象就是一个文件流，它也可能是网络流，也可能是内存中的一个字节流，但只要read()方法返回的是有效的图像数据，就不影响读取图像的功能。</span><br></pre></td></tr></table></figure>
<h2 id="getter-setter"><a href="#getter-setter" class="headerlink" title="getter setter"></a>getter setter</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class Student(object):</span><br><span class="line">...     def __init__(self,name,*args,**kw):</span><br><span class="line">...         self.__name = name</span><br><span class="line">...         for arg in args:</span><br><span class="line">...               print(&apos;arg: &#123;&#125;&apos;.format(arg))</span><br><span class="line">...         for key in kw:</span><br><span class="line">...               if key == &apos;city&apos;:</span><br><span class="line">...                   print(&apos;city %s&apos; %kw[key])</span><br><span class="line">...     @property</span><br><span class="line">...     def score(self):</span><br><span class="line">...         return  self._score</span><br><span class="line">...     @score.setter</span><br><span class="line">...     def score(self,value):</span><br><span class="line">...         self._score = value</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: __init__() missing 1 required positional argument: &apos;name&apos;</span><br><span class="line">&gt;&gt;&gt; s = Student(&apos;frank&apos;,*(1,2,&apos;a&apos;,3),**&#123;&apos;city&apos;:&apos;changsha&apos;,&apos;job&apos;:&apos;unknown&apos;&#125;)</span><br><span class="line">arg: 1</span><br><span class="line">arg: 2</span><br><span class="line">arg: a</span><br><span class="line">arg: 3</span><br><span class="line">city changsha</span><br><span class="line">&gt;&gt;&gt; s.score = 80</span><br><span class="line">&gt;&gt;&gt; s.score</span><br><span class="line">80</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; class Screen(object):</span><br><span class="line">...     @property</span><br><span class="line">...     def width(self):</span><br><span class="line">...         return self._width</span><br><span class="line">...     @width.setter</span><br><span class="line">...     def width(self,width):</span><br><span class="line">...          self._width = width</span><br><span class="line">...     @property</span><br><span class="line">...     def height(self):</span><br><span class="line">...          return self._height</span><br><span class="line">...     @height.setter</span><br><span class="line">...     def height(self,height):</span><br><span class="line">...          self._height = height</span><br><span class="line">...     @property</span><br><span class="line">...     def resolution(self):</span><br><span class="line">...          self._resolution = self._width * self._height</span><br><span class="line">...          return self._resolution</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; s = Screen()</span><br><span class="line">&gt;&gt;&gt; s.width = 600</span><br><span class="line">&gt;&gt;&gt; s.height = 800</span><br><span class="line">&gt;&gt;&gt; s.resolution</span><br><span class="line">480000</span><br></pre></td></tr></table></figure>
<p>##记住标准写法就好，别追问，会晕！！！<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class Student(object):</span><br><span class="line">...      def __init__(self,name,score,*args,**kw):</span><br><span class="line">...           self._name = name</span><br><span class="line">...           self._score = score</span><br><span class="line">...           if len(args)!=0:</span><br><span class="line">...               self.arg = args[0]</span><br><span class="line">...           for key in kw:</span><br><span class="line">...               if key == &apos;city&apos;:</span><br><span class="line">...                   self.city = kw[key]</span><br><span class="line">...      @property</span><br><span class="line">...      def name(self):</span><br><span class="line">...          return self._name</span><br><span class="line">...      @name.setter</span><br><span class="line">...      def name(self,name):</span><br><span class="line">...          self._name = name</span><br><span class="line">...      @property</span><br><span class="line">...      def score(self):</span><br><span class="line">...           return self._score</span><br><span class="line">...      @score.setter</span><br><span class="line">...      def score(self,score):</span><br><span class="line">...           self._score = score</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; args=(&apos;a&apos;,1,2)</span><br><span class="line">&gt;&gt;&gt; kw = &#123;&apos;city&apos;:&apos;changsha&apos;,&apos;job&apos;:&apos;unknown&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; s = Student(&apos;frank&apos;,100,*args,**kw)</span><br><span class="line">&gt;&gt;&gt; s.name</span><br><span class="line">&apos;frank&apos;</span><br><span class="line">&gt;&gt;&gt; s.score</span><br><span class="line">100</span><br><span class="line">&gt;&gt;&gt; s.city</span><br><span class="line">&apos;changsha&apos;</span><br><span class="line">&gt;&gt;&gt; s.arg</span><br><span class="line">&apos;a&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; class Student(object):</span><br><span class="line">...     def __init__(self,name,age,score,*args,**kw):</span><br><span class="line">...         self._name=name</span><br><span class="line">...         self._age = age</span><br><span class="line">...         self._score = score</span><br><span class="line">...         if len(args)!=0:</span><br><span class="line">...             self.arg = args[0]</span><br><span class="line">...         for key in kw:</span><br><span class="line">...             if key == &apos;city&apos;:</span><br><span class="line">...                 self.city = kw[key]</span><br><span class="line">...     @property</span><br><span class="line">...     def name(self):</span><br><span class="line">...         return self._name</span><br><span class="line">...     @name.setter</span><br><span class="line">...     def name(self,name):</span><br><span class="line">...         self._name = name</span><br><span class="line">...     @property</span><br><span class="line">...     def age(self):</span><br><span class="line">...         return self._age</span><br><span class="line">...     @age.setter</span><br><span class="line">...     def age(self,age):</span><br><span class="line">...         if not isinstance(age,int):</span><br><span class="line">...             raise TypeError(&apos;年龄必须为整数!&apos;)</span><br><span class="line">...         else:</span><br><span class="line">...             self._age = age</span><br><span class="line">...     @property</span><br><span class="line">...     def score(self):</span><br><span class="line">...         return self._score</span><br><span class="line">...     @score.setter</span><br><span class="line">...     def score(self,score):</span><br><span class="line">...         if not isinstance(score,int):</span><br><span class="line">...             raise TypeError(&apos;分数应该为整数!&apos;)</span><br><span class="line">...         elif not  0&lt;= score &lt;= 100:</span><br><span class="line">...             raise ValueError(&apos;分数必须介于0-100之间!&apos;)</span><br><span class="line">...         else:</span><br><span class="line">...             self._score = score</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; s = Student(&apos;frank&apos;,18,100)</span><br><span class="line">&gt;&gt;&gt; s.name</span><br><span class="line">&apos;frank&apos;</span><br><span class="line">&gt;&gt;&gt; s.age</span><br><span class="line">18</span><br><span class="line">&gt;&gt;&gt; s.score</span><br><span class="line">100</span><br></pre></td></tr></table></figure></p>
<h2 id="多继承-，对应-java-extends-class-implements-Runnable-这种写法，-只是-python-木有-接口一说-貌似，我也不确定哈，自己去查查吧"><a href="#多继承-，对应-java-extends-class-implements-Runnable-这种写法，-只是-python-木有-接口一说-貌似，我也不确定哈，自己去查查吧" class="headerlink" title="多继承 ，对应 java  extends class  implements  Runnable   这种写法， 只是 python 木有 接口一说 貌似，我也不确定哈，自己去查查吧"></a>多继承 ，对应 java  extends class  implements  Runnable   这种写法， 只是 python 木有 接口一说 貌似，我也不确定哈，自己去查查吧</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class Animal():</span><br><span class="line">...     pass</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; Animal()</span><br><span class="line">&lt;__main__.Animal object at 0x008DCF30&gt;</span><br><span class="line">&gt;&gt;&gt; class Mammal(Animal):</span><br><span class="line">...     pass</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; class Runnable(object):</span><br><span class="line">...     def run(self):</span><br><span class="line">...          print(&apos;running......&apos;)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; class Flyable(object):</span><br><span class="line">...     def fly(self):</span><br><span class="line">...         print(&apos;flying......&apos;)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; class Dog(Mammal,Runnable):</span><br><span class="line">...     pass</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; d = Dog()</span><br><span class="line">&gt;&gt;&gt; d.run()</span><br><span class="line">running......</span><br><span class="line">&gt;&gt;&gt; class Bat(Mammal,Flyable):</span><br><span class="line">...     pass</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; b = Bat()</span><br><span class="line">&gt;&gt;&gt; b.fly()</span><br><span class="line">flying......</span><br></pre></td></tr></table></figure>
<h2 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># __slot__  固定 self  属性个数</span><br><span class="line"># __str__   区别 于  __repr__   前一个 是 返回给 用户的 ， 第二个 是 返回给 程序员 用来调试的 </span><br><span class="line">&gt;&gt;&gt; class Student(object):</span><br><span class="line">...      def __init__(self,name):</span><br><span class="line">...           self.name = name</span><br><span class="line">...      def __str__(self):</span><br><span class="line">...           return &apos;Student object (name = &#123;&#125;)&apos;.format(self.name)</span><br><span class="line">...      __repr__ = __str__</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; s = Student(&apos;frank&apos;)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">Student object (name = frank)</span><br></pre></td></tr></table></figure>
<h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from enum import Enum</span><br><span class="line">&gt;&gt;&gt; Month = Enum(&apos;Month&apos;,(&apos;Jan&apos;, &apos;Feb&apos;, &apos;Mar&apos;, &apos;Apr&apos;, &apos;May&apos;, &apos;Jun&apos;, &apos;Jul&apos;, &apos;Aug&apos;, &apos;Sep&apos;, &apos;Oct&apos;, &apos;Nov&apos;, &apos;Dec&apos;))</span><br><span class="line">&gt;&gt;&gt; for name,member in Month.__members__.items():</span><br><span class="line">...     print(name, &apos;=&gt;&apos;, member, &apos;,&apos;, member.value)</span><br><span class="line">...</span><br><span class="line">Jan =&gt; Month.Jan , 1</span><br><span class="line">Feb =&gt; Month.Feb , 2</span><br><span class="line">Mar =&gt; Month.Mar , 3</span><br><span class="line">Apr =&gt; Month.Apr , 4</span><br><span class="line">May =&gt; Month.May , 5</span><br><span class="line">Jun =&gt; Month.Jun , 6</span><br><span class="line">Jul =&gt; Month.Jul , 7</span><br><span class="line">Aug =&gt; Month.Aug , 8</span><br><span class="line">Sep =&gt; Month.Sep , 9</span><br><span class="line">Oct =&gt; Month.Oct , 10</span><br><span class="line">Nov =&gt; Month.Nov , 11</span><br><span class="line">Dec =&gt; Month.Dec , 12</span><br><span class="line">&gt;&gt;&gt; from enum import Enum,unique</span><br><span class="line">&gt;&gt;&gt; @unique</span><br><span class="line">... class Weekday(Enum):</span><br><span class="line">...     Sun=0</span><br><span class="line">...     Mon=1</span><br><span class="line">...     Tue=2</span><br><span class="line">...     Wed=3</span><br><span class="line">...     Thu=4</span><br><span class="line">...     Fri=5</span><br><span class="line">...     Sat =6</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; day1 = Weekday.Sun</span><br><span class="line">&gt;&gt;&gt; day1</span><br><span class="line">&lt;Weekday.Sun: 0&gt;</span><br><span class="line">&gt;&gt;&gt; day1.value</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; day1 = Weekday(0)</span><br><span class="line">&gt;&gt;&gt; day1</span><br><span class="line">&lt;Weekday.Sun: 0&gt;</span><br><span class="line">&gt;&gt;&gt; day1.value</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; for name,member in Weekday.__members__.items():</span><br><span class="line">...     print(name,&apos;==&gt;&apos;,member)</span><br><span class="line">...</span><br><span class="line">Sun ==&gt; Weekday.Sun</span><br><span class="line">Mon ==&gt; Weekday.Mon</span><br><span class="line">Tue ==&gt; Weekday.Tue</span><br><span class="line">Wed ==&gt; Weekday.Wed</span><br><span class="line">Thu ==&gt; Weekday.Thu</span><br><span class="line">Fri ==&gt; Weekday.Fri</span><br><span class="line">Sat ==&gt; Weekday.Sat</span><br></pre></td></tr></table></figure>
<p>##枚举类与错误综合小例子<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class Student(object):</span><br><span class="line">...     def __init__(self,name,gender):</span><br><span class="line">...          if not isinstance(gender,Gender):</span><br><span class="line">...               raise TypeError(&apos;&#123;&#125;&apos;.format(&apos;传入的性别类型异常&apos;))</span><br><span class="line">...          self.__name = name</span><br><span class="line">...          self.gender = gender</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; bart = Student(&apos;Bart&apos;, Gender.Male)</span><br><span class="line">&gt;&gt;&gt; if bart.gender == Gender.Male:</span><br><span class="line">...     print(&apos;测试通过!&apos;)</span><br><span class="line">... else:</span><br><span class="line">...     print(&apos;测试失败!&apos;)</span><br><span class="line">...</span><br><span class="line">测试通过!</span><br><span class="line">&gt;&gt;&gt; bart = Student(&apos;Bart&apos;, &apos;男&apos;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 4, in __init__</span><br><span class="line">TypeError: 传入的性别类型异常</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="元类，我服了！！！"><a href="#元类，我服了！！！" class="headerlink" title="元类，我服了！！！"></a>元类，我服了！！！</h2><p><a href="http://blog.jobbole.com/21351/" target="_blank" rel="noopener">推荐一篇高分文章读懂元类</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def fn(self,world = &apos;world!&apos;):</span><br><span class="line">...     print(&apos;hello &#123;&#125;&apos;.format(world))</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; Hello = type(&apos;Hello&apos;,(object,),dict(hello = fn))</span><br><span class="line">&gt;&gt;&gt; h = Hello()</span><br><span class="line">&gt;&gt;&gt; h.hello()</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; class ListMetaclass(type):</span><br><span class="line">...     def __new__(cls,name,bases,attrs):</span><br><span class="line">...         attrs[&apos;add&apos;]=lambda self,value:self.append(value)</span><br><span class="line">...         return type.__new__(cls,name,bases,attrs)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; class MyList(list,metaclass=ListMetaclass):</span><br><span class="line">...     pass</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; l = MyList()</span><br><span class="line">&gt;&gt;&gt; l.add(5)</span><br><span class="line">&gt;&gt;&gt; l</span><br><span class="line">[5]</span><br><span class="line"></span><br><span class="line"># 类是一种特殊的对象，因为python 是动态语言，可以后期绑定属性方法等</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; class ObjectCreator():</span><br><span class="line">...     pass</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; print(ObjectCreator)</span><br><span class="line">&lt;class &apos;__main__.ObjectCreator&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; print(hasattr(ObjectCreator,&apos;new_attribute&apos;))</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; ObjectCreator.new_attribute = &apos;foo&apos;</span><br><span class="line">&gt;&gt;&gt; print(hasattr(ObjectCreator,&apos;new_attribute&apos;))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; ObjectCreatorMirror = ObjectCreator</span><br><span class="line">&gt;&gt;&gt; print(ObjectCreatorMirror())</span><br><span class="line">&lt;__main__.ObjectCreator object at 0x00859A30&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def div(a,b):</span><br><span class="line">...     if not isinstance(a,int) or not isinstance(b,int):</span><br><span class="line">...         raise TypeError(&apos;本方法中除数与被除数都要为整数!&apos;)</span><br><span class="line">...     try:</span><br><span class="line">...         r = a/b</span><br><span class="line">...         print(&apos;r: &#123;&#125;&apos;.format(r))</span><br><span class="line">...     except ZeroDivisionError as e:</span><br><span class="line">...         print(&apos;except: &apos;,e)</span><br><span class="line">...     finally:</span><br><span class="line">...         print(&apos;finally...&apos;)</span><br><span class="line">...     print(&apos;END...&apos;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r = div(1,2)</span><br><span class="line">r: 0.5</span><br><span class="line">finally...</span><br><span class="line">END...</span><br><span class="line">&gt;&gt;&gt; div(1,0)</span><br><span class="line">except:  division by zero</span><br><span class="line">finally...</span><br><span class="line">END...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; def foo(i):</span><br><span class="line">...     return 10/i</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; def bar(j):</span><br><span class="line">...     return foo(j) *2</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; def main(n):</span><br><span class="line">...     try:</span><br><span class="line">...         bar(n)</span><br><span class="line">...     except ZeroDivisionError as e:</span><br><span class="line">...         logging.exception(e)</span><br><span class="line">...     finally:</span><br><span class="line">...         print(&apos;end...&apos;)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; main(5)</span><br><span class="line">end...</span><br><span class="line">&gt;&gt;&gt; main(0)</span><br><span class="line">ERROR:root:division by zero</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 3, in main</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 2, in bar</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 2, in foo</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line">end...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">改错：</span><br><span class="line"></span><br><span class="line">from functools import reduce</span><br><span class="line"></span><br><span class="line">def str2num(s):</span><br><span class="line">    try:</span><br><span class="line">        r = int(s)</span><br><span class="line">    except ValueError as e:</span><br><span class="line">        if isinstance(s,str):</span><br><span class="line">            s=s.replace(&apos;.&apos;,&apos;&apos;)</span><br><span class="line">            r = int(s)</span><br><span class="line">        else:</span><br><span class="line">            raise ValueError(&apos;传入的不是字符串!&apos;)</span><br><span class="line">    finally:</span><br><span class="line">        pass</span><br><span class="line">    return int(s)</span><br><span class="line"></span><br><span class="line">def calc(exp):</span><br><span class="line">    ss = exp.split(&apos;+&apos;)</span><br><span class="line">    ns = map(str2num, ss)</span><br><span class="line">    return reduce(lambda acc, x: acc + x, ns)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    r = calc(&apos;100 + 200 + 345&apos;)</span><br><span class="line">    print(&apos;100 + 200 + 345 =&apos;, r)</span><br><span class="line">    r = calc(&apos;99 + 88 + 7.6&apos;)</span><br><span class="line">    print(&apos;99 + 88 + 7.6 =&apos;, r)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<h2 id="既然如此重要，再谈元类"><a href="#既然如此重要，再谈元类" class="headerlink" title="既然如此重要，再谈元类"></a>既然如此重要，再谈元类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 定义一个函数，用来待会儿在 类 内部或绑定，或调用</span><br><span class="line">def print_s(s):</span><br><span class="line">    print(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义元类， 必须继承自 type 才可以被当做元类，被反射</span><br><span class="line">class ObjectCreatorMetaClass(type):</span><br><span class="line">    def __new__(current_class_name,class_tobe_created_name,base_classess_name_tuple,attrs_hold_dict):</span><br><span class="line">        # 打印一波传进来的参数会发现基本跟命名一致</span><br><span class="line">        print_s(&apos;current_class_name: &#123;&#125;&apos;.format(current_class_name))</span><br><span class="line">        print_s(&apos;class_tobe_created_name: &#123;&#125;&apos;.format(class_tobe_created_name))</span><br><span class="line">        print_s(&apos;base_classess_name_tuple: &#123;&#125;&apos;.format(base_classess_name_tuple))</span><br><span class="line">        print_s(&apos;attrs_hold_dict: &#123;&#125;&apos;.format(attrs_hold_dict))</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        #为要被创建的类 ObjectCreator 添加方法，属性都可以</span><br><span class="line">        attrs_hold_dict[&apos;flag&apos;] = True</span><br><span class="line">        attrs_hold_dict[&apos;current_class_name_print&apos;] = print_s(current_class_name)</span><br><span class="line">        attrs_hold_dict[&apos;class_tobe_created_name_print&apos;] = print_s(class_tobe_created_name)</span><br><span class="line">        attrs_hold_dict[&apos;base_classess_name_tuple_print&apos;] = print_s(base_classess_name_tuple)</span><br><span class="line">        attrs_hold_dict[&apos;attrs_hold_dict_print&apos;] = print_s(attrs_hold_dict)</span><br><span class="line">        return type.__new__(current_class_name,class_tobe_created_name,base_classess_name_tuple,attrs_hold_dict)</span><br><span class="line"></span><br><span class="line"># 定义我们要被创建的 类，为了方便查看传进去的 base_classess_name_tuple ，我们手动让他继承一下 object</span><br><span class="line">class ObjectCreator(object,metaclass = ObjectCreatorMetaClass):</span><br><span class="line">        pass</span><br><span class="line">    </span><br><span class="line"># 思考为什么 第一次打印时候 attrs_hold_dict 会比后一次 打印 少掉一部分属性，方法 (如 &apos;current_class_name_print&apos;: None, &apos;flag&apos;: True)</span><br><span class="line"># 因为这在传进来时候并没有绑定这些参数方法啊，是后面代码 手动绑定的啦 哈哈哈哈或或或</span><br><span class="line"></span><br><span class="line">#  上面的理解有点偏差，但愿看到的人能够自己找出，下面是我重新理解的 </span><br><span class="line"># 定义一个函数，用来待会儿在 类 内部或绑定，或调用</span><br><span class="line">def print_s(s):</span><br><span class="line">    print(s)</span><br><span class="line">    return s</span><br><span class="line"></span><br><span class="line">#必须继承自 type 才可以被当做元类，被反射</span><br><span class="line">class ObjectCreatorMetaClass(type):</span><br><span class="line">    def __new__(current_class_name,class_tobe_created_name,base_classess_name_tuple,attrs_hold_dict):</span><br><span class="line">        # 打印一波传进来的参数会发现基本跟命名一致</span><br><span class="line">        print_s(&apos;current_class_name: &#123;&#125;&apos;.format(current_class_name))</span><br><span class="line">        print_s(&apos;class_tobe_created_name: &#123;&#125;&apos;.format(class_tobe_created_name))</span><br><span class="line">        print_s(&apos;base_classess_name_tuple: &#123;&#125;&apos;.format(base_classess_name_tuple))</span><br><span class="line">        print_s(&apos;attrs_hold_dict: &#123;&#125;&apos;.format(attrs_hold_dict))</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        #为要被创建的类 ObjectCreator 添加方法，属性都可以</span><br><span class="line">        attrs_hold_dict[&apos;flag&apos;] = True</span><br><span class="line">        attrs_hold_dict[&apos;get_metaclass&apos;] = print_s(current_class_name)</span><br><span class="line">        attrs_hold_dict[&apos;get_tobe_created_class&apos;] = print_s(class_tobe_created_name)</span><br><span class="line">        attrs_hold_dict[&apos;get_bases_classess_tuple&apos;] = print_s(base_classess_name_tuple)</span><br><span class="line">        attrs_hold_dict[&apos;get_attrs_hold_dict&apos;] = print_s(attrs_hold_dict)</span><br><span class="line">        return type.__new__(current_class_name,class_tobe_created_name,base_classess_name_tuple,attrs_hold_dict)</span><br><span class="line"></span><br><span class="line">class ObjectCreator(object,metaclass = ObjectCreatorMetaClass):</span><br><span class="line">        pass</span><br><span class="line">    </span><br><span class="line"># 思考为什么 第一次打印时候 attrs_hold_dict 会比后一次 打印 少掉一部分属性，方法 (如 &apos;current_class_name_print&apos;: None, &apos;flag&apos;: True)</span><br><span class="line"># 因为这在传进来时候并没有绑定这些参数方法啊，是后面代码 手动绑定的啦 哈哈哈哈或或或</span><br><span class="line"></span><br><span class="line">object_from_objectcreator = ObjectCreator()</span><br><span class="line">print(object_from_objectcreator.flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 实际上这里返回了</span><br><span class="line">object_from_objectcreator.get_metaclass</span><br><span class="line">object_from_objectcreator.get_tobe_created_class</span><br><span class="line">object_from_objectcreator.get_bases_classess_tuple</span><br><span class="line">object_from_objectcreator.get_attrs_hold_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># out:</span><br><span class="line"># current_class_name: &lt;class &apos;__main__.ObjectCreatorMetaClass&apos;&gt;</span><br><span class="line"># class_tobe_created_name: ObjectCreator</span><br><span class="line"># base_classess_name_tuple: (&lt;class &apos;object&apos;&gt;,)</span><br><span class="line"># attrs_hold_dict: &#123;&apos;__qualname__&apos;: &apos;ObjectCreator&apos;, &apos;__module__&apos;: &apos;__main__&apos;&#125;</span><br><span class="line"># &lt;class &apos;__main__.ObjectCreatorMetaClass&apos;&gt;</span><br><span class="line"># ObjectCreator</span><br><span class="line"># (&lt;class &apos;object&apos;&gt;,)</span><br><span class="line"># &#123;&apos;get_bases_classess_tuple&apos;: (&lt;class &apos;object&apos;&gt;,), &apos;__qualname__&apos;: &apos;ObjectCreator&apos;, &apos;get_metaclass&apos;: &lt;class &apos;__main__.ObjectCreatorMetaClass&apos;&gt;, &apos;__module__&apos;: &apos;__main__&apos;, &apos;get_tobe_created_class&apos;: &apos;ObjectCreator&apos;, &apos;flag&apos;: True&#125;</span><br><span class="line"># True</span><br><span class="line"># &#123;&apos;__module__&apos;: &apos;__main__&apos;,</span><br><span class="line">#  &apos;__qualname__&apos;: &apos;ObjectCreator&apos;,</span><br><span class="line">#  &apos;flag&apos;: True,</span><br><span class="line">#  &apos;get_attrs_hold_dict&apos;: &#123;...&#125;,</span><br><span class="line">#  &apos;get_bases_classess_tuple&apos;: (object,),</span><br><span class="line">#  &apos;get_metaclass&apos;: __main__.ObjectCreatorMetaClass,</span><br><span class="line">#  &apos;get_tobe_created_class&apos;: &apos;ObjectCreator&apos;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 到目前为止，我认为元类来创建 类 ，然后 类再创建对象的过程</span><br><span class="line"># 应该是 定义一个元类继承 type 这个 class  然后 覆写它的 __new__ 方法， TBD。。。</span><br><span class="line"></span><br><span class="line"># 曾经沧海，写完下面这个自动转换要被创建的类的属性为大写 ， 元类也就会了</span><br><span class="line"></span><br><span class="line">class Upper_attr(type):</span><br><span class="line">    def __new__(cls,name,bases,attr_dict):</span><br><span class="line">        attr_dict = dict( (name.upper(),value)  for name,value in attr_dict.items() if not name.startswith(&apos;__&apos;))</span><br><span class="line">        print(attr_dict)</span><br><span class="line">        return super(Upper_attr,cls).__new__(cls,name,bases,attr_dict)</span><br><span class="line">    </span><br><span class="line">class Foo(object,metaclass = Upper_attr):</span><br><span class="line">    bar = &apos;bip&apos;</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">hasattr(Foo,&apos;BAR&apos;)</span><br><span class="line">&#123;&apos;BAR&apos;: &apos;bip&apos;&#125;</span><br><span class="line">True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 思考为什么 构造函数 __init__ 不能用 lambda 来写函数体 , 因为，lambda 冒号后边必须接的是一个 表达式而非语句</span><br><span class="line">def __init__(self, x):</span><br><span class="line">    self.x = x</span><br><span class="line"></span><br><span class="line">def printX(self):</span><br><span class="line">    print(self.x)</span><br><span class="line"></span><br><span class="line">Test = type(&apos;Test&apos;, (object,), &#123;&apos;__init__&apos;: __init__, &apos;printX&apos;: printX&#125;)</span><br><span class="line">class TestMetaclass(type):</span><br><span class="line">    def __new__(cls,name,bases,attr_dict):</span><br><span class="line">        attr_dict[&apos;__init__&apos;] = __init__</span><br><span class="line">        attr_dict[&apos;printX&apos;]= lambda self:print(self.x)</span><br><span class="line">        return super(TestMetaclass,cls).__new__(cls,name,bases,attr_dict)</span><br><span class="line">    </span><br><span class="line">class Test(object,metaclass = TestMetaclass):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">Test(&apos;123&apos;).printX()</span><br></pre></td></tr></table></figure>
<p><img src="https://images2018.cnblogs.com/blog/636379/201806/636379-20180606172351153-443757276.png" alt=""></p>
<h2 id="IO-，-文件-，-内存，-字符，字节-类似于-java-的-IO"><a href="#IO-，-文件-，-内存，-字符，字节-类似于-java-的-IO" class="headerlink" title="IO ， 文件 ， 内存， 字符，字节 类似于 java 的 IO"></a>IO ， 文件 ， 内存， 字符，字节 类似于 java 的 IO</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">file_list = os.listdir(&apos;.&apos;)</span><br><span class="line">for file in file_list:</span><br><span class="line">    file_name,file_extension = os.path.splitext(file)</span><br><span class="line">    if file_extension == &apos;.csv&apos;:</span><br><span class="line">        try:</span><br><span class="line">            f = open(file,&apos;r&apos;)</span><br><span class="line">            print(f.read())</span><br><span class="line">            print(&apos;file name: &apos;,file_name+file_extension)</span><br><span class="line">        except IOError as ioe:</span><br><span class="line">            print(e)</span><br><span class="line">        finally:</span><br><span class="line">            if f:</span><br><span class="line">                f.close()</span><br><span class="line">            </span><br><span class="line">        print(file_name,&apos;&lt;-----&gt;&apos;,file_extension)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gender,age,drug,complication</span><br><span class="line">0,1,3,5</span><br><span class="line">1,3,2,3</span><br><span class="line">0,5,1,2</span><br><span class="line">0,2,3,3</span><br><span class="line">1,7,3,2</span><br><span class="line">0,6,3,4</span><br></pre></td></tr></table></figure>
<p>file name:  mock_data.csv<br>mock_data <-----> .csv</-----></p>
<h2 id="加上-编码，解码方式"><a href="#加上-编码，解码方式" class="headerlink" title="加上 编码，解码方式"></a>加上 编码，解码方式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file_list = os.listdir(&apos;.&apos;)</span><br><span class="line">kw = &#123;&apos;encoding&apos;:&apos;utf8&apos;&#125;</span><br><span class="line">for file in file_list:</span><br><span class="line">    file_name,file_extension = os.path.splitext(file)</span><br><span class="line">    if file_extension == &apos;.csv&apos;:</span><br><span class="line">        try:</span><br><span class="line">            f = open(file,&apos;r&apos;,**kw)</span><br><span class="line">            print(f.read())</span><br><span class="line">            print(&apos;file name: &apos;,file_name+file_extension)</span><br><span class="line">        except IOError as ioe:</span><br><span class="line">            print(e)</span><br><span class="line">        finally:</span><br><span class="line">            if f:</span><br><span class="line">                f.close()</span><br><span class="line">            </span><br><span class="line">        print(file_name,&apos;&lt;-----&gt;&apos;,file_extension)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_list = os.listdir(&apos;.&apos;)</span><br><span class="line">kw = &#123;&apos;encoding&apos;:&apos;utf8&apos;&#125;</span><br><span class="line">for file in file_list:</span><br><span class="line">    file_name,file_extension = os.path.splitext(file)</span><br><span class="line">    if file_extension == &apos;.csv&apos;:</span><br><span class="line">        try:</span><br><span class="line">            f = open(file,&apos;r&apos;,**kw)</span><br><span class="line">#             print(f.read())</span><br><span class="line">            for line in f.readlines():</span><br><span class="line">                print(line)</span><br><span class="line">            print(&apos;file name: &apos;,file_name+file_extension)</span><br><span class="line">        except IOError as ioe:</span><br><span class="line">            print(e)</span><br><span class="line">        finally:</span><br><span class="line">            if f:</span><br><span class="line">                f.close()</span><br><span class="line">            </span><br><span class="line">        print(file_name,&apos;&lt;-----&gt;&apos;,file_extension)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 使用 with 表达式，相当于 java 中的 try(Autoclosable Resources)   语法糖，自动关闭资源</span><br><span class="line"></span><br><span class="line">file_list = os.listdir(&apos;.&apos;)</span><br><span class="line">kw = &#123;&apos;encoding&apos;:&apos;utf8&apos;,&apos;errors&apos;:&apos;ignore&apos;&#125;</span><br><span class="line">for file in file_list:</span><br><span class="line">    file_name,file_extension = os.path.splitext(file)</span><br><span class="line">    if file_extension == &apos;.csv&apos;:</span><br><span class="line">        with open(file,&apos;r&apos;,**kw) as f:</span><br><span class="line">            for line in f.readlines():</span><br><span class="line">                print(line.strip()) # 去掉末尾的换行符</span><br><span class="line">            </span><br><span class="line">        print(file_name,&apos;&lt;-----&gt;&apos;,file_extension)</span><br><span class="line"></span><br><span class="line"># 读写二进制文件 是不能加 errors 参数的</span><br><span class="line">&gt;&gt;&gt; with open(&apos;9.jpg&apos;,&apos;rb&apos;,errors=&apos;ignore&apos;) as fr:</span><br><span class="line">...     with open(&apos;99.jpg&apos;,&apos;wb&apos;) as fw:</span><br><span class="line">...          for line in fr.readlines():</span><br><span class="line">...              fw.write(line)</span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ValueError: binary mode doesn&apos;t take an errors argument</span><br><span class="line"></span><br><span class="line"># StringIO , python 3 中 是 from io import StringIO ,内存读写</span><br><span class="line"># 方式一：</span><br><span class="line">f = StringIO()</span><br><span class="line">f.write(&apos;Hello\nWorld!\n&apos;)</span><br><span class="line">print(f.getvalue())</span><br><span class="line"></span><br><span class="line"># 方式二：</span><br><span class="line">from io import StringIO</span><br><span class="line">f = StringIO(&apos;Hello\nWorld!\n&apos;)</span><br><span class="line"># print(f.getvalue())</span><br><span class="line">while True:</span><br><span class="line">    s = f.readline()</span><br><span class="line">    if s == &apos;&apos;:</span><br><span class="line">        break</span><br><span class="line">    print(s.strip())</span><br><span class="line"></span><br><span class="line">#  StringIO操作的只能是str，如果要操作二进制数据，就需要使用BytesIO。</span><br><span class="line"></span><br><span class="line">#  BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes：</span><br><span class="line"></span><br><span class="line">from io import BytesIO</span><br><span class="line">f = BytesIO()</span><br><span class="line">f.write(&apos;中文&apos;.encode(&apos;utf-8&apos;))</span><br><span class="line">print(f.getvalue())</span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">b&apos;\xe4\xb8\xad\xe6\x96\x87&apos;</span><br><span class="line"></span><br><span class="line"># 解码：</span><br><span class="line">from io import BytesIO</span><br><span class="line">f = BytesIO(b&apos;\xe4\xb8\xad\xe6\x96\x87&apos;)</span><br><span class="line">bcontent = f.read()</span><br><span class="line">print(bcontent.decode(&apos;utf-8&apos;))</span><br><span class="line">与上一种utf-8 编码相反，用 utf-8 解码， 结果如下：</span><br><span class="line">&apos;中文&apos;</span><br></pre></td></tr></table></figure>
<h2 id="文件夹目录以及文件相关操作"><a href="#文件夹目录以及文件相关操作" class="headerlink" title="文件夹目录以及文件相关操作"></a>文件夹目录以及文件相关操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在当前路径下查找包含指定字符串的 所有文件名，并返回。如果是子目录，需要用到递归，没有写，有空写写</span><br><span class="line">import os</span><br><span class="line">def search_file(filename):</span><br><span class="line">    return [file for file in os.listdir(&apos;.&apos;) if os.path.isfile(file) and filename in file]</span><br><span class="line"></span><br><span class="line">for name in search_file(&apos;并&apos;):</span><br><span class="line">    print(name)</span><br><span class="line">并发症逻辑回归准确率.ipynb</span><br><span class="line">并发症概率模型.ipynb</span><br><span class="line"></span><br><span class="line"># api 集中:</span><br><span class="line">os.path.isdir(x)</span><br><span class="line">os.listdir(&apos;.&apos;)</span><br><span class="line">os.path.isfile(x)</span><br><span class="line">os.path.splitext(x)[1]==&apos;.py&apos;</span><br><span class="line">os.name # 操作系统类型   nt </span><br><span class="line">os.uname() # 注意uname()函数在Windows上不提供，也就是说，os模块的某些函数是跟操作系统相关的。</span><br><span class="line">os.environ # 在操作系统中定义的环境变量，全部保存在os.environ这个变量中，可以直接查看：</span><br><span class="line">os.environ.get(&apos;PATH&apos;)</span><br><span class="line"># 查看当前目录的绝对路径:</span><br><span class="line">&gt;&gt;&gt; os.path.abspath(&apos;.&apos;)</span><br><span class="line">&apos;/Users/michael&apos;</span><br><span class="line"># 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:</span><br><span class="line">&gt;&gt;&gt; os.path.join(&apos;/Users/michael&apos;, &apos;testdir&apos;)</span><br><span class="line">&apos;/Users/michael/testdir&apos;</span><br><span class="line"># 然后创建一个目录:</span><br><span class="line">&gt;&gt;&gt; os.mkdir(&apos;/Users/michael/testdir&apos;)</span><br><span class="line"># 删掉一个目录:</span><br><span class="line">&gt;&gt;&gt; os.rmdir(&apos;/Users/michael/testdir&apos;)</span><br><span class="line"># 对文件重命名:</span><br><span class="line">&gt;&gt;&gt; os.rename(&apos;test.txt&apos;, &apos;test.py&apos;)</span><br><span class="line"># 删掉文件:</span><br><span class="line">&gt;&gt;&gt; os.remove(&apos;test.py&apos;)</span><br><span class="line">&gt;&gt;&gt; os.path.split(&apos;/Users/michael/testdir/file.txt&apos;)</span><br><span class="line">(&apos;/Users/michael/testdir&apos;, &apos;file.txt&apos;)</span><br><span class="line"></span><br><span class="line">但是复制文件的函数居然在os模块中不存在！原因是复制文件并非由操作系统提供的系统调用。理论上讲，我们通过上一节的读写文件可以完成文件复制，只不过要多写很多代码。</span><br><span class="line"></span><br><span class="line">幸运的是shutil模块提供了copyfile()的函数，你还可以在shutil模块中找到很多实用函数，它们可以看做是os模块的补充。</span><br></pre></td></tr></table></figure>
<h2 id="序列化-（内存流向磁盘的过程）与-反序列化-磁盘流向内存的过程"><a href="#序列化-（内存流向磁盘的过程）与-反序列化-磁盘流向内存的过程" class="headerlink" title="序列化 （内存流向磁盘的过程）与 反序列化(磁盘流向内存的过程)"></a>序列化 （内存流向磁盘的过程）与 反序列化(磁盘流向内存的过程)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 序列化</span><br><span class="line">import pickle</span><br><span class="line">person = &#123;&apos;name&apos;:&apos;Bob&apos;,&apos;age&apos;:18,&apos;gender&apos;:&apos;Male&apos;&#125;</span><br><span class="line">d = pickle.dumps(person)</span><br><span class="line">with open(&apos;dump.txt&apos;,&apos;wb&apos;) as fw:</span><br><span class="line">    pickle.dump(d,fw)</span><br><span class="line"># 反序列化</span><br><span class="line">with open(&apos;dump.txt&apos;,&apos;rb&apos;) as fr:</span><br><span class="line">    d=pickle.load(fr)</span><br><span class="line">    print(d)</span><br></pre></td></tr></table></figure>
<h3 id="序列化为json-串存储到磁盘，-反序列化从磁盘读取-json-串到内存转化为python对象"><a href="#序列化为json-串存储到磁盘，-反序列化从磁盘读取-json-串到内存转化为python对象" class="headerlink" title="序列化为json 串存储到磁盘， 反序列化从磁盘读取 json 串到内存转化为python对象"></a>序列化为json 串存储到磁盘， 反序列化从磁盘读取 json 串到内存转化为python对象</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">person = dict(name = &apos;Tom&apos;,age = 18,gender=&apos;Male&apos;)</span><br><span class="line">#  dumps 将dict 转成 json 字符串</span><br><span class="line">j = json.dumps(person)</span><br><span class="line">with open(&apos;json.txt&apos;,&apos;w&apos;) as fw:</span><br><span class="line">    # dump 序列化 json 串为文件或类文件对象 (file-like Object)</span><br><span class="line">    json.dump(j,fw)</span><br><span class="line"></span><br><span class="line"># loads 方法将 json串反序列化</span><br><span class="line">json.loads(j)</span><br><span class="line">with open(&apos;json.txt&apos;,&apos;r&apos;) as fr:</span><br><span class="line">    # load 方法将从文件中读取字符串并反序列化为json 串，同时你会发现是反序的</span><br><span class="line">    k = json.load(fr)</span><br><span class="line">    print(k)</span><br></pre></td></tr></table></figure>
<h3 id="再进一阶，序列化与反序列化-json-串-between-对象"><a href="#再进一阶，序列化与反序列化-json-串-between-对象" class="headerlink" title="再进一阶，序列化与反序列化 json 串 between 对象"></a>再进一阶，序列化与反序列化 json 串 between 对象</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">class Student(object):</span><br><span class="line">    def __init__(self,name,age,sex):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">        </span><br><span class="line">s = Student(&apos;Tom&apos;,18,&apos;Male&apos;)</span><br><span class="line">def student2str(std):</span><br><span class="line">    return dict(name=std.name,age=std.age,sex=std.sex)</span><br><span class="line">json.dumps(student2str(s))</span><br><span class="line">json.dumps(s,default=lambda obj:obj.__dict__)</span><br><span class="line"></span><br><span class="line">&apos;&#123;&quot;sex&quot;: &quot;Male&quot;, &quot;age&quot;: 18, &quot;name&quot;: &quot;Tom&quot;&#125;&apos;</span><br><span class="line"></span><br><span class="line">#将上面的 json 字符串转换为 Student 对象</span><br><span class="line">json_str = &apos;&#123;&quot;sex&quot;: &quot;Male&quot;, &quot;age&quot;: 18, &quot;name&quot;: &quot;Tom&quot;&#125;&apos;</span><br><span class="line">def dict2student(d):</span><br><span class="line">    return Student(d[&apos;name&apos;],d[&apos;age&apos;],d[&apos;sex&apos;])</span><br><span class="line">s = json.loads(json_str,object_hook=dict2student)</span><br><span class="line">s.name</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">&apos;Tom&apos;</span><br></pre></td></tr></table></figure>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><h4 id="Python语言特定的序列化模块是pickle，但如果要把序列化搞得更通用、更符合Web标准，就可以使用json模块。"><a href="#Python语言特定的序列化模块是pickle，但如果要把序列化搞得更通用、更符合Web标准，就可以使用json模块。" class="headerlink" title="Python语言特定的序列化模块是pickle，但如果要把序列化搞得更通用、更符合Web标准，就可以使用json模块。"></a>Python语言特定的序列化模块是pickle，但如果要把序列化搞得更通用、更符合Web标准，就可以使用json模块。</h4><h4 id="json模块的dumps-和loads-函数是定义得非常好的接口的典范。当我们使用时，只需要传入一个必须的参数。但是，当默认的序列化或反序列机制不满足我们的要求时，我们-又可以传入更多的参数来定制序列化或反序列化的规则，既做到了接口简单易用，又做到了充分的扩展性和灵活性。"><a href="#json模块的dumps-和loads-函数是定义得非常好的接口的典范。当我们使用时，只需要传入一个必须的参数。但是，当默认的序列化或反序列机制不满足我们的要求时，我们-又可以传入更多的参数来定制序列化或反序列化的规则，既做到了接口简单易用，又做到了充分的扩展性和灵活性。" class="headerlink" title="json模块的dumps()和loads()函数是定义得非常好的接口的典范。当我们使用时，只需要传入一个必须的参数。但是，当默认的序列化或反序列机制不满足我们的要求时，我们#### 又可以传入更多的参数来定制序列化或反序列化的规则，既做到了接口简单易用，又做到了充分的扩展性和灵活性。"></a>json模块的dumps()和loads()函数是定义得非常好的接口的典范。当我们使用时，只需要传入一个必须的参数。但是，当默认的序列化或反序列机制不满足我们的要求时，我们#### 又可以传入更多的参数来定制序列化或反序列化的规则，既做到了接口简单易用，又做到了充分的扩展性和灵活性。</h4><p>##内建模块以及常用第三方模块<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request as urllib2</span><br><span class="line">import random</span><br><span class="line">ua_list=[&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv2.0.1) Gecko/20100101 Firefox/4.0.1&quot;,</span><br><span class="line">        &quot;Mozilla/5.0 (Windows NT 6.1; rv2.0.1) Gecko/20100101 Firefox/4.0.1&quot;,</span><br><span class="line">        &quot;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/11.11&quot;,</span><br><span class="line">        &quot;Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11&quot;,</span><br><span class="line">        &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&quot;]</span><br><span class="line">u_agent = random.choice(ua_list)</span><br><span class="line"># print(u_agent)</span><br><span class="line">url = &apos;http://www.baidu.com&apos;</span><br><span class="line">request = urllib2.Request(url=url)</span><br><span class="line">request.add_header(&quot;User_agent&quot;,u_agent)</span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标准数据类型</span><br><span class="line">Python3 中有六个标准的数据类型：</span><br><span class="line"></span><br><span class="line">Number（数字）</span><br><span class="line">String（字符串）</span><br><span class="line">List（列表）</span><br><span class="line">Tuple（元组）</span><br><span class="line">Sets（集合）</span><br><span class="line">Dictionary（字典）</span><br><span class="line">Python3 的六个标准数据类型中：</span><br><span class="line"></span><br><span class="line">不可变数据（四个）：Number（数字）、String（字符串）、Tuple（元组）、Sets（集合）；</span><br><span class="line">可变数据（两个）：List（列表）、Dictionary（字典）。</span><br><span class="line">Set（集合）</span><br><span class="line">集合（set）是一个无序不重复元素的序列。</span><br><span class="line"></span><br><span class="line">基本功能是进行成员关系测试和删除重复元素。</span><br><span class="line"></span><br><span class="line"># 字符串的一些内建函数需要掌握 ，首字母大写 capitalize()，lower(),upper() 等等</span><br><span class="line">a = &apos;frank&apos;</span><br><span class="line">a.capitalize()</span><br><span class="line"></span><br><span class="line">可以使用大括号 &#123; &#125; 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 &#123; &#125;，因为 &#123; &#125; 是用来创建一个空字典。</span><br><span class="line"></span><br><span class="line"># set可以进行集合运算</span><br><span class="line">a = set(&apos;abracadabra&apos;)</span><br><span class="line">b = set(&apos;alacazam&apos;)</span><br><span class="line"> </span><br><span class="line">print(a)</span><br><span class="line"> </span><br><span class="line">print(a - b)     # a和b的差集</span><br><span class="line"> </span><br><span class="line">print(a | b)     # a和b的并集</span><br><span class="line"> </span><br><span class="line">print(a &amp; b)     # a和b的交集</span><br><span class="line"> </span><br><span class="line">print(a ^ b)     # a和b中不同时存在的元素</span><br><span class="line"></span><br><span class="line">dict_1 = dict(name=&apos;frank&apos;,age=18)  # 这写法我喜欢</span><br><span class="line">dict_1 = &#123;&apos;name&apos;:&apos;frank&apos;,&apos;age&apos;:18&#125;  # 这写法也能接受</span><br><span class="line">dict_1 = dict([(&apos;name&apos;,&apos;frank&apos;),(&apos;age&apos;,18)])   # 这种写法我觉得纯粹是有病。。。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">删除引用，估算引用，查询引用</span><br><span class="line">del b</span><br><span class="line">eval(&apos;b&apos;) </span><br><span class="line">hex(id(b))   # 16 进制 hash值</span><br><span class="line"># str()出来的值是给人看的。。。repr()出来的值是给python看的，可以通过eval()重新变回一个Python对象</span><br><span class="line">a = &apos;a&apos;</span><br><span class="line">eval(&apos;a&apos;)</span><br><span class="line">hex(id(a))</span><br><span class="line">eval(repr(a))</span><br><span class="line"></span><br><span class="line"># print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=&quot;&quot;：</span><br><span class="line"># 不换行输出</span><br><span class="line">print( x, end=&quot; &quot; )</span><br><span class="line">print( y, end=&quot; &quot; )</span><br><span class="line">dict  items() , keys(), values()</span><br><span class="line">list  pop , append</span><br><span class="line">import keyword</span><br><span class="line">keyword.kwlist</span><br><span class="line"></span><br><span class="line">#  dict 是个好命令</span><br><span class="line">dir(dict)</span><br><span class="line">&apos;__setitem__&apos;,</span><br><span class="line"> &apos;__sizeof__&apos;,</span><br><span class="line"> &apos;__str__&apos;,</span><br><span class="line"> &apos;__subclasshook__&apos;,</span><br><span class="line"> &apos;clear&apos;,</span><br><span class="line"> &apos;copy&apos;,</span><br><span class="line"> &apos;fromkeys&apos;,</span><br></pre></td></tr></table></figure>
<p><img src="https://images2018.cnblogs.com/blog/636379/201806/636379-20180614172745469-1697836617.png" alt=""><br><img src="https://images2018.cnblogs.com/blog/636379/201806/636379-20180614173008955-842967537.png" alt=""></p>
<h3 id="python-日志"><a href="#python-日志" class="headerlink" title="python 日志"></a>python 日志</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这段代码保存为 config.py</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">__author__ = &apos;Frank Li&apos;</span><br><span class="line">import logging</span><br><span class="line">class Config():</span><br><span class="line">    # 创建一个logger</span><br><span class="line">    logger = logging.getLogger(&apos;statisticNew&apos;)</span><br><span class="line">    logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">    # 创建一个handler，用于写入日志文件</span><br><span class="line">    fh = logging.FileHandler(&apos;test.log&apos;)</span><br><span class="line">    fh.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">    # 再创建一个handler，用于输出到控制台</span><br><span class="line">    ch = logging.StreamHandler()</span><br><span class="line">    ch.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">    # 定义handler的输出格式</span><br><span class="line">    formatter = logging.Formatter(&apos;%(asctime)s - %(name)s - %(levelname)s - %(message)s&apos;)</span><br><span class="line">    fh.setFormatter(formatter)</span><br><span class="line">    ch.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">    # 给logger添加handler</span><br><span class="line">    logger.addHandler(fh)</span><br><span class="line">    logger.addHandler(ch)</span><br><span class="line">    def getLog(self):</span><br><span class="line">        return self.logger</span><br></pre></td></tr></table></figure>
<h1 id="引用上段代码保存的额-config-py-文件里的module"><a href="#引用上段代码保存的额-config-py-文件里的module" class="headerlink" title="引用上段代码保存的额 config.py 文件里的module"></a>引用上段代码保存的额 config.py 文件里的module</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__author__ = &apos;Frank Li&apos;</span><br><span class="line">from config import Config</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    conf = Config()</span><br><span class="line">    logger = conf.getLog()</span><br><span class="line">    logger.info(&apos;foorbar&apos;)</span><br><span class="line">    boy = &quot;Frank Li&quot;</span><br><span class="line">    is_handsome = True</span><br><span class="line">    logger.info(&quot;boy=%s,is_handsome=%s&quot;,boy,is_handsome)</span><br><span class="line">   </span><br><span class="line"># 异常处理，以后尽量不要用山寨的 print 了</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">   ....  </span><br><span class="line">except Exception as e:</span><br><span class="line">    logger.exception(&apos;ERROR readFile:%s,%s&apos; % (path,str(e)))</span><br></pre></td></tr></table></figure>
<h3 id="编码规范-变量定义"><a href="#编码规范-变量定义" class="headerlink" title="编码规范 , 变量定义"></a>编码规范 , 变量定义</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  Python变量命名用法（一般变量、常量、私有变量、内置变量）</span><br><span class="line">#coding:utf8</span><br><span class="line">__author__ = &quot;libingxian&quot;</span><br><span class="line"></span><br><span class="line">class TestDemo(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Python变量命名用法（以字符或者下划线开头，可以包括字母、数字、下划线，区别大小写）</span><br><span class="line">    一般变量</span><br><span class="line">    常量</span><br><span class="line">    私有变量</span><br><span class="line">    内置变量</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    FINAL_VAR = &quot;V1.0&quot; # 常量，不可修改的变量，以大写字母或加下划线命名，这个只是约定，即使更改了也不会报错</span><br><span class="line"></span><br><span class="line">    class_name = &quot;TestDemo&quot; # 常见变量命名，</span><br><span class="line"></span><br><span class="line">    __maker__ = &apos;libingxian&apos; # 内置变量，两个前置下划线和两个后置下划线，内置对象所具有，声明时不可与内置变量名的重复</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.__private_var = &quot;private&quot; # 私有变量，以两个前置下划线开头，只能在本类中使用，类外强制访问会报错</span><br><span class="line">        self.public_var = &quot;public&quot; # 一般变量</span><br><span class="line"></span><br><span class="line">    def __private_method(self):# 私有方法，以两个下划线开头、字母小写，只能在本类中使用，类外强制访问会报错</span><br><span class="line">        print &quot;i am private&quot;</span><br><span class="line"></span><br><span class="line">    def public_method(self):</span><br><span class="line">        print &quot;i am public&quot;</span><br><span class="line"></span><br><span class="line">test_demo = TestDemo()</span><br><span class="line">print test_demo.FINAL_VAR # 访问常量</span><br><span class="line">print test_demo.public_var # 访问一般变量</span><br><span class="line">print test_demo.__private_var # 访问私有变量，运行会报错</span><br><span class="line">test_demo.__private_method() # 访问私有方法，运行会报错</span><br></pre></td></tr></table></figure>
<h3 id="字典操作-dict-1-update-dict-2-合并-dict"><a href="#字典操作-dict-1-update-dict-2-合并-dict" class="headerlink" title="字典操作 dict_1.update(dict_2)  合并 dict"></a>字典操作 dict_1.update(dict_2)  合并 dict</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dict_1 = &#123;&apos;name&apos;:&apos;Frank&apos;,&apos;age&apos;:18&#125;</span><br><span class="line">gender_dict = &#123;&apos;gender&apos;:&apos;Male&apos;&#125;</span><br><span class="line">dict_1.update(gender_dict)</span><br><span class="line">print(dict_1)</span><br></pre></td></tr></table></figure>
<h3 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mcase = &#123;&apos;a&apos;: 10, &apos;b&apos;: 34, &apos;A&apos;: 7, &apos;Z&apos;: 3&#125;</span><br><span class="line"></span><br><span class="line">mcase_frequency = &#123;</span><br><span class="line">    k.lower(): mcase.get(k.lower(), 0) + mcase.get(k.upper(), 0)</span><br><span class="line">    for k in mcase.keys()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># mcase_frequency == &#123;&apos;a&apos;: 17, &apos;z&apos;: 3, &apos;b&apos;: 34&#125;</span><br><span class="line"></span><br><span class="line"># key,value 交换</span><br><span class="line">&gt;&gt;&gt; &#123;value:key for key,value in dict_1.items()&#125;</span><br><span class="line">&#123;&apos;Frank&apos;: &apos;name&apos;, 18: &apos;age&apos;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="由-两个-list-合并-dict-原理是利用-zip-合并成-key1-value1-key2-value2-然后用-dict-key-value-方式"><a href="#由-两个-list-合并-dict-原理是利用-zip-合并成-key1-value1-key2-value2-然后用-dict-key-value-方式" class="headerlink" title="由 两个 list 合并 dict  原理是利用 zip 合并成 ((key1,value1),(key2,value2)) 然后用 dict[key] = value 方式"></a>由 两个 list 合并 dict  原理是利用 zip 合并成 ((key1,value1),(key2,value2)) 然后用 dict[key] = value 方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list_1 = [&apos;name&apos;,&apos;age&apos;]</span><br><span class="line">list_2 = [&apos;Frank&apos;,18]</span><br><span class="line">person_dict = &#123;&#125;</span><br><span class="line">for key,value in zip(list_1,list_2):</span><br><span class="line">    person_dict[key] = value</span><br><span class="line">print(person_dict)</span><br><span class="line"></span><br><span class="line"># 反过来   zip(*zipped)   ==&gt; flattern</span><br><span class="line">dict_2 = dict(name=&apos;Frank&apos;,age=18)</span><br><span class="line">list_3,list_4 = zip(*[ [key,value] for key,value in dict_2.items()])</span><br><span class="line">list_3,list_4</span><br></pre></td></tr></table></figure>
<h1 id="list-去重"><a href="#list-去重" class="headerlink" title="list 去重"></a>list 去重</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 方法一 </span><br><span class="line">l1 = [&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;b&apos;,&apos;c&apos;,&apos;a&apos;,&apos;a&apos;]</span><br><span class="line">l2 = &#123;&#125;.fromkeys(l1).keys()</span><br><span class="line">print(l2)</span><br><span class="line"># 方法二</span><br><span class="line">l3 = list(set(l1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 三元运算  还可以用 元组条件表达式的三元运算   is_fat =(&apos;not fat&apos;,&apos;fat&apos;) [is_state]</span><br><span class="line">&gt;&gt;&gt; is_state = True</span><br><span class="line">&gt;&gt;&gt; is_fat = &apos;fat&apos; if is_state else &apos;not fat&apos;</span><br><span class="line">&gt;&gt;&gt; is_fat</span><br><span class="line">&apos;fat&apos;</span><br><span class="line"></span><br><span class="line"># 优雅地查出重复数据</span><br><span class="line">&gt;&gt;&gt; str_list = [&apos;a&apos;,&apos;b&apos;,&apos;a&apos;,&apos;c&apos;,&apos;d&apos;,&apos;b&apos;,&apos;c&apos;]</span><br><span class="line">&gt;&gt;&gt; [s for s in str_list if str_list.count(s) &gt;1]</span><br><span class="line">[&apos;a&apos;, &apos;b&apos;, &apos;a&apos;, &apos;c&apos;, &apos;b&apos;, &apos;c&apos;]</span><br><span class="line">&gt;&gt;&gt; set([s for s in str_list if str_list.count(s) &gt;1])</span><br><span class="line">&#123;&apos;a&apos;, &apos;c&apos;, &apos;b&apos;&#125;</span><br><span class="line"></span><br><span class="line"># 求交集 差集</span><br><span class="line">&gt;&gt;&gt; str_list2 = [&apos;a&apos;,&apos;b&apos;]</span><br><span class="line">&gt;&gt;&gt; str_list = set([s for s in str_list if str_list.count(s) &gt;1])</span><br><span class="line">&gt;&gt;&gt; str_list.intersection(str_list2)</span><br><span class="line">&#123;&apos;a&apos;, &apos;b&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; str_list.difference(str_list2)</span><br><span class="line">&#123;&apos;c&apos;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">列表排序</span><br><span class="line"></span><br><span class="line">    a = [(1, 2), (4, 1), (9, 10), (13, -3)]</span><br><span class="line">    a.sort(key=lambda x: x[1])</span><br><span class="line"></span><br><span class="line">    print(a)</span><br><span class="line">    # Output: [(13, -3), (4, 1), (1, 2), (9, 10)]</span><br></pre></td></tr></table></figure>
<h3 id="列表并行排序"><a href="#列表并行排序" class="headerlink" title="列表并行排序"></a>列表并行排序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list_1 = [8,4,3,2,7,6,5]</span><br><span class="line">list_2 = [&apos;e&apos;,&apos;d&apos;,&apos;c&apos;,&apos;y&apos;,&apos;i&apos;,&apos;o&apos;,&apos;p&apos;]</span><br><span class="line">data = zip(list_1,list_2)</span><br><span class="line">data = sorted(data)</span><br><span class="line">list1, list2 = map(lambda t: list(t), zip(*data))</span><br><span class="line">print(list1)</span><br><span class="line">print(list2)</span><br></pre></td></tr></table></figure>
<h3 id="模拟-with-open"><a href="#模拟-with-open" class="headerlink" title="模拟 with open"></a>模拟 with open</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class File(object):</span><br><span class="line">...    def __init__(self,file_name,method):</span><br><span class="line">...        self.file_obj = open(file_name,method)</span><br><span class="line">...    def __enter__(self):</span><br><span class="line">...        return self.file_obj</span><br><span class="line">...    def __exit__(self,type,value,traceback):</span><br><span class="line">...        self.file_obj.close()</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; with File(&apos;C:/Users/FrankLi/Desktop/Demo.java&apos;,&apos;r&apos;) as f:</span><br><span class="line">...     for line in f.readlines():</span><br><span class="line">...         print(line)</span><br><span class="line">...</span><br><span class="line">class Demo&#123;</span><br><span class="line"></span><br><span class="line">        public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(&quot;Hello world!&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">我们的__exit__函数接受三个参数。这些参数对于每个上下文管理器类中的__exit__方法都是必须的。我们来谈谈在底层都发生了什么。</span><br><span class="line"></span><br><span class="line">with语句先暂存了File类的__exit__方法</span><br><span class="line">然后它调用File类的__enter__方法</span><br><span class="line">__enter__方法打开文件并返回给with语句</span><br><span class="line">打开的文件句柄被传递给opened_file参数</span><br><span class="line">我们使用.write()来写文件</span><br><span class="line">with语句调用之前暂存的__exit__方法</span><br><span class="line">__exit__方法关闭了文件</span><br></pre></td></tr></table></figure>
<h3 id="类似于-scala-的-flattern-列表展平"><a href="#类似于-scala-的-flattern-列表展平" class="headerlink" title="类似于 scala 的 flattern 列表展平"></a>类似于 scala 的 flattern 列表展平</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import itertools</span><br><span class="line">&gt;&gt;&gt; a_list = [[1,2],[3,4],[5,6]]</span><br><span class="line">&gt;&gt;&gt; print(itertools.chain(*a_list))</span><br><span class="line">&lt;itertools.chain object at 0x039E6090&gt;</span><br><span class="line">&gt;&gt;&gt; print(list(itertools.chain(*a_list)))</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; print(list(itertools.chain.from_iterable(a_list)))</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; l = [[1,2,3],[4,5,6], [7], [8,9]]</span><br><span class="line">&gt;&gt;&gt; [item for sublist in l for item in sublist] # 推导式中两层 for 循环也可以实现</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure>
<h3 id="for-else-结构"><a href="#for-else-结构" class="headerlink" title="for - else 结构"></a>for - else 结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for n in range(2, 100):</span><br><span class="line">    for x in range(2, n):</span><br><span class="line">        if n % x == 0:</span><br><span class="line">            print(n, &apos;equals&apos;, x, &apos;*&apos;, n / x)</span><br><span class="line">            break</span><br><span class="line">    else:</span><br><span class="line">        # loop fell through without finding a factor</span><br><span class="line">        print(n, &apos;is a prime number&apos;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 替代 switch case 方案 字典映射</span><br><span class="line">&gt;&gt;&gt; def switch(x):</span><br><span class="line">...     return &#123;&apos;0&apos;:0,&apos;1&apos;:1,&apos;2&apos;:2&#125;.get(x,&apos;nothing&apos;)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; switch(&apos;0&apos;)</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; switch(&apos;3&apos;)</span><br><span class="line">&apos;nothing&apos;</span><br></pre></td></tr></table></figure>
<p>16.检查一个字符串是否是一个数字?<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In[22]: x = &apos;569789&apos;</span><br><span class="line"></span><br><span class="line">In[23]: x.isdigit()</span><br><span class="line"></span><br><span class="line">Out[23]: True</span><br><span class="line"></span><br><span class="line">In[24]: y = &apos;gdf2667&apos;</span><br><span class="line"></span><br><span class="line">In[25]: y.isdigit()</span><br><span class="line"></span><br><span class="line">Out[25]: False</span><br></pre></td></tr></table></figure></p>
<p>17.查找列表中某个元素的下标?<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In[26]: [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;].index(&apos;b&apos;)</span><br><span class="line"></span><br><span class="line">Out[26]: 1</span><br></pre></td></tr></table></figure></p>
<p>18.如何在列表中随机取一个元素？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">f= [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</span><br><span class="line"></span><br><span class="line">print(random.choice(f))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 字典排序</span><br><span class="line">&gt;&gt;&gt; dict_1 = &#123;&apos;a&apos;:3,&apos;b&apos;:1,&apos;c&apos;:2&#125;</span><br><span class="line">&gt;&gt;&gt; sorted(dict_1.items(),key=lambda x:x[1])</span><br><span class="line">[(&apos;b&apos;, 1), (&apos;c&apos;, 2), (&apos;a&apos;, 3)]</span><br></pre></td></tr></table></figure>
<h2 id="JAVA-vs-PYTHON-还没细看"><a href="#JAVA-vs-PYTHON-还没细看" class="headerlink" title="JAVA vs PYTHON (还没细看)"></a>JAVA vs PYTHON (还没细看)</h2><p><img src="http://images.cnblogs.com/cnblogs_com/Frank99/1215494/o_vs.jpg" alt="jvsp"></p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>至此，关于 python 基础的总结基本完结，其中有涉及到高阶知识 ， 元类，位置参数关键字参数 可变参数(*args   type: tuple,**kwargs   type: dict)，<br>生成器，装饰器，函数式编程风格的 map reduce  filter sorted上下文管理器，  要补充的有 ： 进程线程协程，异步io<br>接下来的时间应该是 学习 python 的重要常用模块(Pandas,Numpy,Scipy,PIL pillow , opencv,sk-learn,xgboost,爬虫库 scrappy等)以及框架(Django)</p>
<p>最后感慨一下，如果一开始碰到了python 也许根本就不会去学java了，感觉python的设计思想比较符合我的思想各种黑魔法的魅力吸引着我！！！<br>（虽然java不可否认也是一门优雅的工程化设计语言但不够精简，语法冗长）。。。life is short , I use python and java ! 其实语言本身没有好坏，<br>只有适用场景(多一门语言能力便多一种工具，而工具可以提高效率！)，我曾经还一直在想为什么没有出现一门语言一统天下呢 现在想想也是天真。。。<br>不过语言始终流于招式，接下来是要修炼一波内功了，算法才是灵魂！</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python 标准异常总结</title>
    <url>/2018/07/12/python-%E6%A0%87%E5%87%86%E5%BC%82%E5%B8%B8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>Python标准异常总结</p>
<p>AssertionError    断言语句（assert）失败<br>AttributeError    尝试访问未知的对象属性<br>EOFError    用户输入文件末尾标志EOF（Ctrl+d）<br>FloatingPointError    浮点计算错误<br>GeneratorExit    generator.close()方法被调用的时候<br>ImportError    导入模块失败的时候<br>IndexError    索引超出序列的范围<br>KeyError    字典中查找一个不存在的关键字<br>KeyboardInterrupt    用户输入中断键（Ctrl+c）<br>MemoryError    内存溢出（可通过删除对象释放内存）<br>NameError    尝试访问一个不存在的变量<br>NotImplementedError    尚未实现的方法<br>OSError    操作系统产生的异常（例如打开一个不存在的文件）<br>OverflowError    数值运算超出最大限制<br>ReferenceError    弱引用（weak reference）试图访问一个已经被垃圾回收机制回收了的对象<br>RuntimeError    一般的运行时错误<br>StopIteration    迭代器没有更多的值<br>SyntaxError    Python的语法错误<br>IndentationError    缩进错误<br>TabError    Tab和空格混合使用<br>SystemError    Python编译器系统错误<br>SystemExit    Python编译器进程被关闭<br>TypeError    不同类型间的无效操作<br>UnboundLocalError    访问一个未初始化的本地变量（NameError的子类）<br>UnicodeError    Unicode相关的错误（ValueError的子类）<br>UnicodeEncodeError    Unicode编码时的错误（UnicodeError的子类）<br>UnicodeDecodeError    Unicode解码时的错误（UnicodeError的子类）<br>UnicodeTranslateError    Unicode转换时的错误（UnicodeError的子类）<br>ValueError    传入无效的参数<br>ZeroDivisionError    除数为零</p>
<p>以下是 Python 内置异常类的层次结构：</p>
<p>BaseException<br>+– SystemExit<br>+– KeyboardInterrupt<br>+– GeneratorExit<br>+– Exception<br>      +– StopIteration<br>      +– ArithmeticError<br>      |    +– FloatingPointError<br>      |    +– OverflowError<br>      |    +– ZeroDivisionError<br>      +– AssertionError<br>      +– AttributeError<br>      +– BufferError<br>      +– EOFError<br>      +– ImportError<br>      +– LookupError<br>      |    +– IndexError<br>      |    +– KeyError<br>      +– MemoryError<br>      +– NameError<br>      |    +– UnboundLocalError<br>      +– OSError<br>      |    +– BlockingIOError<br>      |    +– ChildProcessError<br>      |    +– ConnectionError<br>      |    |    +– BrokenPipeError<br>      |    |    +– ConnectionAbortedError<br>      |    |    +– ConnectionRefusedError<br>      |    |    +– ConnectionResetError<br>      |    +– FileExistsError<br>      |    +– FileNotFoundError<br>      |    +– InterruptedError<br>      |    +– IsADirectoryError<br>      |    +– NotADirectoryError<br>      |    +– PermissionError<br>      |    +– ProcessLookupError<br>      |    +– TimeoutError<br>      +– ReferenceError<br>      +– RuntimeError<br>      |    +– NotImplementedError<br>      +– SyntaxError<br>      |    +– IndentationError<br>      |         +– TabError<br>      +– SystemError<br>      +– TypeError<br>      +– ValueError<br>      |    +– UnicodeError<br>      |         +– UnicodeDecodeError<br>      |         +– UnicodeEncodeError<br>      |         +– UnicodeTranslateError<br>      +– Warning<br>           +– DeprecationWarning<br>           +– PendingDeprecationWarning<br>           +– RuntimeWarning<br>           +– SyntaxWarning<br>           +– UserWarning<br>           +– FutureWarning<br>           +– ImportWarning<br>           +– UnicodeWarning<br>           +– BytesWarning<br>           +– ResourceWarning</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python -- 进程线程协程专题</title>
    <url>/2018/07/16/python-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<h1 id="进程专栏-multiprocessing-高级模块"><a href="#进程专栏-multiprocessing-高级模块" class="headerlink" title="进程专栏 multiprocessing 高级模块"></a>进程专栏 multiprocessing 高级模块</h1><p>要让Python程序实现多进程（multiprocessing），我们先了解操作系统的相关知识。</p>
<p>Unix/Linux操作系统提供了一个fork()系统调用，它非常特殊。普通的函数调用，调用一次，返回一次，但是fork()调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。</p>
<p>子进程永远返回0，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用getppid()就可以拿到父进程的ID。</p>
<p>Python的os模块封装了常见的系统调用，其中就包括fork，可以在Python程序中轻松创建子进程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># unix 系 下</span><br><span class="line">import os</span><br><span class="line">print(&apos;进程 id &#123;&#125; 开启...&apos;.format(os.getpid()))</span><br><span class="line">pid = os.fork() # 开启新的进程,但仍是先有父进程</span><br><span class="line">if pid == 0:</span><br><span class="line">    print(&apos;我是子进程 id (&#123;&#125;) 被父进程 id (&#123;&#125;) 创建&apos;.format(os.getpid(),os.getppid())) # 是被开启的子进程</span><br><span class="line">else:</span><br><span class="line">    print(&apos;我是父进程 id (&#123;&#125;) 创建了子进程 id (&#123;&#125;)&apos;.format(os.getpid(),pid)) # 父进程 用来开启别的进程</span><br><span class="line"></span><br><span class="line">进程 id 5697 开启...</span><br><span class="line">我是父进程 id (5697) 创建了子进程 id (7799)</span><br><span class="line">我是子进程 id (7799) 被父进程 id (5697) 创建</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">print(&quot;Process (%s) is start...&quot; %os.getpid())</span><br><span class="line">pid = os.fork()</span><br><span class="line">print(&apos;pid: &#123;&#125;&apos;.format(pid))</span><br><span class="line">if pid == 0:</span><br><span class="line">     print(&apos;I am child process (%s) and my parent is %s.&apos; % (os.getpid(), os.getppid()))</span><br><span class="line">else:</span><br><span class="line">     print(&apos;I (%s) just created a child process (%s).&apos; % (os.getpid(), pid))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 系统通用 导入 multiprocessing 模块</span><br><span class="line">from multiprocessing import Process</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"># 子进程要执行的代码</span><br><span class="line">def run_proc(name):</span><br><span class="line">    print(&apos;Run child process %s (%s)...&apos; % (name, os.getpid()))</span><br><span class="line"></span><br><span class="line">if __name__==&apos;__main__&apos;:</span><br><span class="line">    print(&apos;Parent process %s.&apos; % os.getpid())</span><br><span class="line">    p = Process(target=run_proc, args=(&apos;test&apos;,))</span><br><span class="line">    print(&apos;Child process will start.&apos;)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print(&apos;Child process end.&apos;)</span><br><span class="line"></span><br><span class="line">Parent process 5697.</span><br><span class="line">Child process will start.</span><br><span class="line">Run child process test (7870)...</span><br><span class="line">Child process end.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用进程池 from multiprocessing import Pool</span><br><span class="line">from multiprocessing import Pool</span><br><span class="line">import os,time,random</span><br><span class="line">def process_pool_task(name):</span><br><span class="line">    print(&apos;task &#123;&#125; run and its pid (&#123;&#125;)&apos;.format(name,os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random() * 3)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(&apos;task &#123;&#125; finished and cost &#123;&#125;&apos;.format(name,(end-start)))</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    print(&apos;Parent process %s&apos; %os.getpid())</span><br><span class="line">    p = Pool(4)</span><br><span class="line">    for i in range(5):</span><br><span class="line">        p.apply_async(process_pool_task,args=(i,))</span><br><span class="line">    print(&apos;Waiting for all subprocesses done...&apos;)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    print(&apos;All subprocesses finished!&apos;)</span><br></pre></td></tr></table></figure>
<p><img src="https://images2018.cnblogs.com/blog/636379/201807/636379-20180706162303831-723679106.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 子进程 ，这地方也不是很懂 用途是干嘛。。。</span><br><span class="line">&gt;&gt;&gt; import subprocess</span><br><span class="line">&gt;&gt;&gt; r = subprocess.call([&apos;nslookup&apos;,&apos;www.baidu.com&apos;])</span><br><span class="line">Server:  UnKnown</span><br><span class="line">Address:  192.168.0.1</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:    www.a.shifen.com</span><br><span class="line">Addresses:  14.215.177.38</span><br><span class="line">          14.215.177.39</span><br><span class="line">Aliases:  www.baidu.com</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&apos;Exit code: &#123;&#125;&apos;.format(r))</span><br><span class="line">Exit code: 0</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这里用途很明显就是进程间通信一个造数据，一个消费数据</span><br><span class="line"></span><br><span class="line">from multiprocessing import Process,Queue</span><br><span class="line">import os,time,random</span><br><span class="line">def write_queue(q):</span><br><span class="line">    print(&apos;write process (&#123;&#125;) start...&apos;.format(os.getpid()))</span><br><span class="line">    for s in [&apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;]:</span><br><span class="line">        print(&apos;put value %s into queue...&apos;%s)</span><br><span class="line">        q.put(s)</span><br><span class="line">        time.sleep(random.random() * 3)</span><br><span class="line">def read_queue(q):</span><br><span class="line">    print(&apos;reading process (&#123;&#125;) start...&apos;.format(os.getpid()))</span><br><span class="line">    while(True):</span><br><span class="line">        value = q.get(True)</span><br><span class="line">        print(&apos;Get value %s from queue&apos;%value)</span><br><span class="line">        </span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write_queue, args=(q,))</span><br><span class="line">    pr = Process(target=read_queue, args=(q,))</span><br><span class="line">    pw.start()</span><br><span class="line">    pr.start()</span><br><span class="line">    pw.join()</span><br><span class="line">    pr.terminate()</span><br><span class="line"></span><br><span class="line">reading process (8848) start...</span><br><span class="line">write process (8847) start...</span><br><span class="line">put value A into queue...</span><br><span class="line">Get value A from queue</span><br><span class="line">put value B into queue...</span><br><span class="line">Get value B from queue</span><br><span class="line">put value C into queue...</span><br><span class="line">Get value C from queue</span><br><span class="line">put value D into queue...</span><br><span class="line">Get value D from queue</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 重写。。。</span><br><span class="line">from multiprocessing import Process , Queue</span><br><span class="line">import os, time , random</span><br><span class="line"></span><br><span class="line">def write_queue(q):</span><br><span class="line">    print(&apos;write process (&#123;&#125;) start...&apos;.format(os.getpid()))</span><br><span class="line">    for w in [&apos;First&apos;,&apos;Second&apos;,&apos;Third&apos;]:</span><br><span class="line">        print(&apos;write process %s put %s into queue&apos;%(os.getpid(),w))</span><br><span class="line">        q.put(w)</span><br><span class="line">        time.sleep(random.random() * 3)</span><br><span class="line">        </span><br><span class="line">def read_queue(q):</span><br><span class="line">    print(&apos;read process (&#123;&#125;) start...&apos;.format(os.getpid()))</span><br><span class="line">    while True:</span><br><span class="line">        value = q.get(True)</span><br><span class="line">        print(&apos;read process &#123;&#125; get &#123;&#125; from queue&apos;.format(os.getpid(),value))</span><br><span class="line">        </span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write_queue, args=(q,))</span><br><span class="line">    pr = Process(target=read_queue, args=(q,))</span><br><span class="line">    pw.start()</span><br><span class="line">    pr.start()</span><br><span class="line">    pw.join()</span><br><span class="line">    pr.terminate()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from multiprocessing import Process,Queue</span><br><span class="line">import os,time,random</span><br><span class="line"></span><br><span class="line">def write_queue(q):</span><br><span class="line">    words = [chr(i) for i in range(97,123)]</span><br><span class="line">    for word in words:</span><br><span class="line">        print(&apos;Process &#123;&#125; start to write word &quot;&#123;&#125;&quot; into queue...&apos;.format(os.getpid(),word))</span><br><span class="line">        q.put(word)</span><br><span class="line">        time.sleep(random.random() * 3)</span><br><span class="line"></span><br><span class="line">def read_queue(q):</span><br><span class="line">    while True:</span><br><span class="line">        word = q.get(True)</span><br><span class="line">        print(&apos;Process &#123;&#125; start to read word &#123;&#125; from queue...&apos;.format(os.getpid(),word))</span><br><span class="line">        </span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write_queue,args=(q,))</span><br><span class="line">    pr = Process(target=read_queue,args=(q,))</span><br><span class="line">    pw.start()</span><br><span class="line">    pr.start()</span><br><span class="line">    pw.join()</span><br><span class="line">    pr.terminate()</span><br></pre></td></tr></table></figure>
<h1 id="线程专栏-threading-高级模块"><a href="#线程专栏-threading-高级模块" class="headerlink" title="线程专栏   threading 高级模块"></a>线程专栏   threading 高级模块</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from threading import Thread,current_thread</span><br><span class="line">&gt;&gt;&gt; import time,random</span><br><span class="line">&gt;&gt;&gt; def thread_task():</span><br><span class="line">...     print(&apos;thread &#123;&#125; start...&apos;.format(current_thread().name))</span><br><span class="line">...     for i in range(5):</span><br><span class="line">...         print(&apos;thread &#123;&#125; running...&#123;&#125;&apos;.format(current_thread().name,i))</span><br><span class="line">...     print(&apos;thread &#123;&#125; finished...&apos;.format(current_thread().name))</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; for n in range(100):</span><br><span class="line">...     t = Thread(target=thread_task,name=&apos;thread task &apos;+str(n))</span><br><span class="line">...     t.start()</span><br><span class="line">...     t.join()</span><br></pre></td></tr></table></figure>
<h1 id="协程专栏-Coroutine"><a href="#协程专栏-Coroutine" class="headerlink" title="协程专栏  Coroutine"></a>协程专栏  Coroutine</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def consumer():</span><br><span class="line">    r = &apos;&apos;</span><br><span class="line">    while True:</span><br><span class="line">        n = yield r</span><br><span class="line">        if not n:</span><br><span class="line">            return</span><br><span class="line">        print(&apos;consumer processing n: &#123;&#125;&apos;.format(n))</span><br><span class="line">        r = &apos;200 ok!&apos;</span><br><span class="line">        </span><br><span class="line">def producer(c):</span><br><span class="line">    #开启生成器 必须 send(None)</span><br><span class="line">    c.send(None)</span><br><span class="line">    for n in range(1,6,1):</span><br><span class="line">        print(&apos;producer processing n: &#123;&#125;&apos;.format(n))</span><br><span class="line">        r = c.send(n)</span><br><span class="line">        print(&apos;consumer return r:&#123;&#125;&apos;.format(r))</span><br><span class="line">    c.close()</span><br><span class="line">    </span><br><span class="line">c = consumer()</span><br><span class="line">producer(c)</span><br></pre></td></tr></table></figure>
<h2 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a><a href="http://www.cnblogs.com/euphie/p/7008077.html" target="_blank" rel="noopener">扩展知识</a></h2><p>##<a href="https://blog.csdn.net/historyasamirror/article/details/5778378" target="_blank" rel="noopener">扩展知识2</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">概念</span><br><span class="line">进程是一个具有一定独立功能的程序关于某次数据集合的一次运行活动，它是操作系统分配资源的基本单元。它可以申请和拥有系统资源，是一个动态的概念，是一个活动的实体。它不只是程序的代码，还包括当前的活动，通过程序计数器的值和处理寄存器的内容来表示。进程的概念主要有两点：第一，进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本段、数据段和堆栈段。文本段存储处理器执行的代码；数据段储变量和进程执行期间使用的动态分配的内存；堆栈段存储着活动过程调用的指令和本地变量。第二，进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时（操作系统执行之），它才能成为一个活动的实体，我们称其为进程。</span><br><span class="line"></span><br><span class="line">线程是进程的一个执行流，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。一个标准的线程由线程ID，当前指令指针(PC），寄存器集合和堆栈组 成。另外，线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，每一个程序都至少有一个线程，若程序只有一个线程，那就是程序本身。</span><br><span class="line"></span><br><span class="line">协程是一种编译器级实现的用户态的轻量级线程，本质上讲只是线程的一种实现。相对于线程，协程也相对独立，有自己的上下文，但是其切换由程序自己控制。</span><br><span class="line"></span><br><span class="line">image</span><br><span class="line"></span><br><span class="line">以上是抽象概念，它们的特性也很大程度取决于具体实现（操作系统或者编译器）。比如LINUX的线程实现就和WINDOWS有很大不同，LINUX的线程其实是轻量级进程（Light Weight Process，LWP），GO的协程也和C#的协程不同。</span><br><span class="line"></span><br><span class="line">如果把进程比作工厂里的一个车间，车间里有各种的原材料，设备，和工作人员等等。那么线程就是车间里的生产线，它们负责整个车间的生产工作，共享车间内的其它资源，一个车间最少有一个生产线，也可以有多个。协程就好像是生产线里更小的生产单位，能够被一些阀门控制。</span><br><span class="line"></span><br><span class="line">从概念上看，协程其实是线程的一种实现，所以可以先简单的认为协程就是线程的一种。而多进程和多线程程序却有着比较大的区别。</span><br><span class="line"></span><br><span class="line">进程的创建</span><br><span class="line">在WINDOWS和LINUX下的进程创建不太一样。</span><br><span class="line"></span><br><span class="line">LINUX的fork()是函数通过系统调用创建一个与原来进程几乎完全相同的进程，exec()则是用来启动另外的进程以取代当前运行的进程，一个进程一旦调用exec类函数，它本身就&quot;死亡&quot;了，系统把代码段替换成新的程序的代码，废弃原有的数据段和堆栈段，并为新程序分配新的数据段与堆栈段，唯一留下的，就是进程号。</span><br><span class="line"></span><br><span class="line">WINDOWS则是用CreateProccess()来创建一个新的进程，这个新进程运行指定的可执行文件，看上去效果和LINUX的fork()+exec()差不多，只是实现上不太相同。</span><br><span class="line"></span><br><span class="line">线程的模型</span><br><span class="line">多对一模型</span><br><span class="line">将多个用户级线程映射到一个内核级线程，线程管理在用户空间完成，这种模型下操作系统并不知道多线程的存在。如的GO（1.5以前）就是这种模型。</span><br><span class="line">优点：线程管理是在用户空间进行的，切换上下文开销比较小，性能较高。</span><br><span class="line">缺点：当一个线程在使用内核服务时被阻塞，那么整个进程都会被阻塞；多个线程不能并行地运行在多处理机上。</span><br><span class="line"></span><br><span class="line">一对一模型</span><br><span class="line">将每个用户级线程映射到一个内核级线程。Java的线程就属于这种模型。</span><br><span class="line">优点：当一个线程被阻塞后，允许另一个线程继续执行，所以并发能力较强；能很好的利用到CPU的多核心。</span><br><span class="line">缺点：每创建一个用户级线程都需要创建一个内核级线程与其对应，这样创建线程的开销比较大，会影响到应用程序的性能。并且切换线程要进出内核，代价比较大。</span><br><span class="line"></span><br><span class="line">多对多模型</span><br><span class="line">将n个用户级线程映射到m个内核级线程上，要求 m &lt;= n。GO（1.5之后）的协程就属于这种线程模型。</span><br><span class="line">特点：既克服了多对一模型的并发度不高的缺点，又克服了一对一模型的一个用户进程占用太多内核级线程，开销太大的缺点。又拥有多对一模型和一对一模型各自的优点。</span><br><span class="line"></span><br><span class="line">进程和线程的区别</span><br><span class="line">进程间是完全独立的个体，多进程环境中，任何一个进程终止不会影响其他进程，而多线程环境中任何一个线程执行exit系统调用，则所有线程退出，最常见的是因某个线程异常导致程序的退出。</span><br><span class="line"></span><br><span class="line">通信方式，进程间通信（IPC：无名管道，有名管道，消息队列，信号，信号量，共享内存等）较为复杂，线程间可以直接读写进程数据段（如全局变量）来进行通信（需要线程同步和互斥手段的辅助，以保证数据的一致性）。</span><br><span class="line"></span><br><span class="line">线程比进程轻，不管是创建还是上下文切换，线程的开销都要比进程小。</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>资源总结</title>
    <url>/2021/10/03/%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="网盘搜索"><a href="#网盘搜索" class="headerlink" title="网盘搜索"></a>网盘搜索</h2><ul>
<li><a href="http://pan.antzuhl.cn/index" target="_blank" rel="noopener">antzuhl</a></li>
<li><a href="https://pan.yuankongjian.com/" target="_blank" rel="noopener">yuankongjian</a></li>
<li><a href="https://www.aliabb.com/" target="_blank" rel="noopener">alibb</a></li>
<li><a href="https://alifree.net/?dgzaps=zi3ih2" target="_blank" rel="noopener">alifree</a></li>
<li><a href="http://alipan.vip/" target="_blank" rel="noopener">alipanvip</a></li>
</ul>
<h2 id="资源分享站"><a href="#资源分享站" class="headerlink" title="资源分享站"></a>资源分享站</h2><ul>
<li><a href="https://iao.su/146/" target="_blank" rel="noopener">不死鸟</a></li>
</ul>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li><a href="https://telegram.org/" target="_blank" rel="noopener">电报</a></li>
<li><a href="https://www.wenshushu.cn/" target="_blank" rel="noopener">wenshushu</a></li>
<li><p><a href="https://up.woozooo.com/account.php?action=login&amp;ref=/mydisk.php" target="_blank" rel="noopener">蓝奏云</a></p>
</li>
<li><p><a href="https://bulink.xyz/user_traffic_log/" target="_blank" rel="noopener">良心白嫖</a></p>
</li>
<li><a href="https://hub.fastgit.org/freefq/free" target="_blank" rel="noopener">良心白嫖2</a></li>
<li><a href="https://www.ecyjc.com/" target="_blank" rel="noopener">良心白嫖3</a></li>
</ul>
<h2 id="破解软件-amp-小众软件"><a href="#破解软件-amp-小众软件" class="headerlink" title="破解软件 &amp; 小众软件"></a>破解软件 &amp; 小众软件</h2><ul>
<li><a href="https://www.getitfree.cn" target="_blank" rel="noopener">正版中国</a></li>
<li><a href="https://www.52pojie.cn/" target="_blank" rel="noopener">52pj</a></li>
<li><a href="https://meta.appinn.net" target="_blank" rel="noopener">appinn</a></li>
</ul>
<h2 id="sync-等-bt-资源搜索"><a href="#sync-等-bt-资源搜索" class="headerlink" title="sync 等 bt 资源搜索"></a>sync 等 bt 资源搜索</h2><ul>
<li><a href="http://wherebt.com/#" target="_blank" rel="noopener">wherebt</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://rutracker.org/</span><br><span class="line">http://rustorka.com/forum/index.php</span><br><span class="line">https://rarbg.to/</span><br><span class="line">https://1337x.to/</span><br><span class="line">https://zooqle.com/</span><br><span class="line">https://btdig.com/</span><br><span class="line">https://idope.se/</span><br><span class="line">https://yts.mx/</span><br><span class="line">https://eztvstatus.com/</span><br><span class="line">https://ww2.kickass.how/</span><br><span class="line">https://www.demonoid.is/</span><br><span class="line">https://www.torrentdownloads.me/</span><br><span class="line">https://limetorrents.cyou/</span><br><span class="line">https://extratorrents.it/home</span><br><span class="line">https://proxygalaxy.pw/</span><br></pre></td></tr></table></figure>
<h2 id="你懂的"><a href="#你懂的" class="headerlink" title="你懂的"></a>你懂的</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Javmost：https://javmost.com</span><br><span class="line">Avgle：https://avgle.com</span><br><span class="line">Av01：https://av01.tv</span><br><span class="line">Supjav：https://supjav.com</span><br><span class="line">Netflav：https://www.netflav.com</span><br><span class="line">Jable：https://jable.tv</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title>golang -- 多语言比较</title>
    <url>/2021/09/06/%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<p><strong>俩 j 语言 加分号是比较好的写法</strong><br><a href="https://studygolang.com/articles/2059" target="_blank" rel="noopener">golang编码规范</a><br><a href="http://twitter.github.io/effectivescala/index-cn.html" target="_blank" rel="noopener">scala编码规范</a><br><strong><em>python Utils.py</em></strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Utils(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, arr):</span><br><span class="line">        self.arr = arr</span><br><span class="line">        self.arr_len = len(self.arr)</span><br><span class="line">    def bubbleSort(self):</span><br><span class="line">        for i in range(0, self.arr_len, 1):</span><br><span class="line">            for j in range(0, self.arr_len - 1 - i, 1):</span><br><span class="line">                if self.arr[j] &gt; self.arr[j+1]:</span><br><span class="line">                   self.swap(self.arr, j, j+1)</span><br><span class="line"></span><br><span class="line">    def swap(self, arr, i, j):</span><br><span class="line">        arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line"></span><br><span class="line">    def selectSort(self):</span><br><span class="line">        for i in range(0, self.arr_len, 1):</span><br><span class="line">            for j in range(i+1, self.arr_len, 1):</span><br><span class="line">                if self.arr[i] &gt; self.arr[j]:</span><br><span class="line">                    self.swap(self.arr, i, j)</span><br><span class="line"></span><br><span class="line">    def insertSort(self):</span><br><span class="line">        for i in range(0, self.arr_len, 1):</span><br><span class="line">            for j in range(i, 0, -1):</span><br><span class="line">                if self.arr[j] &lt; self.arr[j-1]:</span><br><span class="line">                    self.swap(self.arr, j-1, j)</span><br><span class="line"></span><br><span class="line">    def partition(self,low, high):</span><br><span class="line">        pivot = arr[low]</span><br><span class="line">        while(low &lt; high):</span><br><span class="line">            while(low &lt; high and self.arr[high] &gt; pivot):</span><br><span class="line">                high -= 1</span><br><span class="line">            self.arr[low] = self.arr[high]</span><br><span class="line">            while(low &lt; high and self.arr[low] &lt; pivot):</span><br><span class="line">                low += 1</span><br><span class="line">            self.arr[high] = self.arr[low]</span><br><span class="line">        self.arr[low] = pivot</span><br><span class="line">        return low</span><br><span class="line"></span><br><span class="line">    def quickSort(self, low, high):</span><br><span class="line">        # low = 0 if not low else low</span><br><span class="line">        # high = self.arr_len if not high else high</span><br><span class="line"></span><br><span class="line">        if(low &lt; high):</span><br><span class="line">            pivot = self.partition(low, high)</span><br><span class="line">            self.quickSort(low, pivot - 1)</span><br><span class="line">            self.quickSort(pivot + 1, high)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    arr = [10,9,8,7,6,5,4,3,2,1]</span><br><span class="line">    print(arr)</span><br><span class="line">    # Utils(arr).bubbleSort()</span><br><span class="line">    # Utils(arr).selectSort()</span><br><span class="line">    # Utils(arr).insertSort()</span><br><span class="line">    Utils(arr).quickSort(0, len(arr) - 1)</span><br><span class="line">    print(arr)`</span><br></pre></td></tr></table></figure></p>
<p><strong><em>javascript   Utils.js</em></strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 亦或 交换数组的值</span><br><span class="line">function swap(arr, i, j)&#123;</span><br><span class="line">    arr[i] = arr[i] ^ arr[j];</span><br><span class="line">    arr[j] = arr[i] ^ arr[j];</span><br><span class="line">    arr[i] = arr[i] ^ arr[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 冒泡排序</span><br><span class="line">function bubbleSort(arr)&#123;</span><br><span class="line">    for(let i=0; i&lt;arr.length; i++)&#123;</span><br><span class="line">        for(let j=0; j&lt;arr.length - i -1; j++)&#123;</span><br><span class="line">            if(arr[j] &gt; arr[j+1])&#123;</span><br><span class="line">                swap(arr, j, j+1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 选择排序</span><br><span class="line">function selectSort(arr)&#123;</span><br><span class="line">    for(i=0; i&lt;arr.length; i++)&#123;</span><br><span class="line">        for(j=i+1;j&lt;arr.length;j++)&#123;</span><br><span class="line">            if(arr[i] &gt; arr[j])&#123;</span><br><span class="line">                swap(arr, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 插入排序</span><br><span class="line">function insertSort(arr)&#123;</span><br><span class="line">    for(i=0; i&lt;arr.length; i++)&#123;</span><br><span class="line">        for(j=i; j&gt;0; j--)&#123;</span><br><span class="line">            if(arr[j] &lt; arr[j-1])&#123;</span><br><span class="line">                swap(arr, j, j-1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 快速排序</span><br><span class="line">function partition(arr, low , high)&#123;</span><br><span class="line">    let pivot = arr[low];</span><br><span class="line">    while(low &lt; high)&#123;</span><br><span class="line">        while(low &lt; high &amp;&amp; arr[high] &gt; pivot)&#123;</span><br><span class="line">            --high;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[low] = arr[high];</span><br><span class="line">        while(low&lt;high &amp;&amp; arr[low] &lt; pivot)&#123;</span><br><span class="line">            ++low;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[high] = arr[low];</span><br><span class="line">    &#125;</span><br><span class="line">    arr[low] = pivot;</span><br><span class="line">    return low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function quickSort(arr, low, high)&#123;</span><br><span class="line">    if(low === undefined &amp;&amp; high === undefined)&#123;</span><br><span class="line">        low = 0;</span><br><span class="line">        high = arr.length-1;</span><br><span class="line">    &#125;</span><br><span class="line">    if(low &lt; high)&#123;</span><br><span class="line">        let pivot = partition(arr, low, high);</span><br><span class="line">        quickSort(arr, low, pivot - 1);</span><br><span class="line">        quickSort(arr, pivot + 1, high);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];</span><br><span class="line">console.log(arr);</span><br><span class="line">//bubbleSort(arr)</span><br><span class="line">//selectSort(arr)</span><br><span class="line">//insertSort(arr);</span><br><span class="line">quickSort(arr);</span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure></p>
<p><strong><em>java Utils.java </em></strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class SortUtils&#123;</span><br><span class="line">		</span><br><span class="line">	private static &lt;T extends Comparable&lt;? super T&gt;&gt; int partition(T[] arr, int low, int high)&#123;</span><br><span class="line">		// 找到基准值</span><br><span class="line">		T pivot = arr[low]; // 把 low 这个坑挖出来了</span><br><span class="line">		// low, high 两根 &quot;指针&quot;</span><br><span class="line">		while(low &lt; high)&#123;</span><br><span class="line">			// 从右边开始向左查找是否有比基准值小的值</span><br><span class="line">			while(low &lt; high &amp;&amp; arr[high].compareTo(pivot) == 1)&#123;</span><br><span class="line">				--high;</span><br><span class="line">			&#125;</span><br><span class="line">			// 跳出上面的循环，意味着从右-&gt;左, 找到找到了比基准值小的值</span><br><span class="line">			arr[low] = arr[high];</span><br><span class="line">			// 然后从左往右找是否有比基准值大的值</span><br><span class="line">			while(low &lt; high &amp;&amp; arr[low].compareTo(pivot) == -1 )&#123;</span><br><span class="line">				++low;</span><br><span class="line">			&#125;</span><br><span class="line">			// 跳出上面的循环，意味着从左-&gt;右， 找到了比基准值大的值, 填坑</span><br><span class="line">			arr[high] = arr[low];</span><br><span class="line">		&#125;</span><br><span class="line">		// 最后把 pivot 基准值回填到 low 里</span><br><span class="line">		arr[low] = pivot;</span><br><span class="line">		// 将此刻基准值的下标 返出去，用于下次快排分区的左右 index +- 1 临界下标</span><br><span class="line">		return low;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public static &lt;T extends Comparable&lt;? super T&gt;&gt; void quickSort(T[] arr)&#123;</span><br><span class="line">		quickSort(arr, 0, arr.length-1);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	private static &lt;T extends Comparable&lt;? super T&gt;&gt; void quickSort(T[] arr, int low, int high)&#123;</span><br><span class="line">		if(low &lt; high)&#123;</span><br><span class="line">			// 分区</span><br><span class="line">			int pivot = partition(arr, low, high);</span><br><span class="line">			// 对分区分别递归快排</span><br><span class="line">			// 左分区排序</span><br><span class="line">			quickSort(arr, low, pivot-1);</span><br><span class="line">			// 右分区排序</span><br><span class="line">			quickSort(arr, pivot+1, high);</span><br><span class="line">		&#125;</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public static &lt;T extends Number &amp; Comparable&lt;T&gt;&gt; T[] bubbleSort(T[] arr)&#123;</span><br><span class="line">        for(int i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">            for(int j=0;j&lt;arr.length-i-1;j++)&#123;</span><br><span class="line">                if(arr[j].compareTo(arr[j+1]) == 1)&#123;</span><br><span class="line">                    T temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j+1];</span><br><span class="line">                    arr[j+1] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package com.patterns.strategy3;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class Utils &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String [] args)&#123;</span><br><span class="line">        Long [] arrL = &#123;10L,9L, 8L,7L, 6L, 5L, 4L,3L&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(arrL));</span><br><span class="line">//        bubbleSort(arrL);</span><br><span class="line">//        selectSort(arrL);</span><br><span class="line">//        insertSort((arrL));</span><br><span class="line">        shellSort(arrL);</span><br><span class="line">//        quickSort(arrL);</span><br><span class="line">        System.out.println(Arrays.toString(arrL));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&gt; void swap(T[] arr, int i, int j)&#123;</span><br><span class="line">        T temp = arr[j];</span><br><span class="line">        arr[j] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;? super T&gt;&gt; T[] bubbleSort(T[] arr)&#123;</span><br><span class="line">        for(int i=0; i&lt;arr.length; i++)&#123;</span><br><span class="line">            for(int j=0; j&lt;arr.length -i -1; j++)&#123;</span><br><span class="line">                if(arr[j].compareTo(arr[j+1]) == 1)&#123;</span><br><span class="line">                    swap(arr, j, j+1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;? super T&gt;&gt; T[] selectSort(T[] arr)&#123;</span><br><span class="line">        for(int i=0; i&lt;arr.length; i++)&#123;</span><br><span class="line">            for(int j=i+1; j&lt;arr.length; j++)&#123;</span><br><span class="line">                if(arr[i].compareTo(arr[j]) == 1)&#123;</span><br><span class="line">                    swap(arr, i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;? super T&gt;&gt; T[] insertSort(T[] arr)&#123;</span><br><span class="line">        for(int i=0; i&lt;arr.length; i++)&#123;</span><br><span class="line">            for(int j=i; j&gt;0; j--)&#123;</span><br><span class="line">                if(arr[j].compareTo(arr[j-1]) == -1)&#123;</span><br><span class="line">                    swap(arr, j, j-1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 改进版的 插入排序</span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;? super T&gt;&gt; T[] shellSort(T[] arr)&#123;</span><br><span class="line">        int h = 1;</span><br><span class="line">        while(h &lt; arr.length)&#123;</span><br><span class="line">            h = 3*h + 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int gap=h;gap&gt;0;gap=(gap-1)/3)&#123; // 从 h 开始缩小间隔=》 gap: 1</span><br><span class="line">            for(int i=gap; i&lt;arr.length; i++)&#123; // gap , gap+1, gap+2...</span><br><span class="line">                for(int j=i; j-gap&gt;=0; j-=gap)&#123;</span><br><span class="line">                    if(arr[j].compareTo(arr[j-gap]) == -1)&#123;</span><br><span class="line">                        swap(arr, j , j-gap);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;? super T&gt;&gt; int partition(T[] arr, int low, int high)&#123;</span><br><span class="line">        T pivot = arr[low];</span><br><span class="line">        while(low&lt;high)&#123;</span><br><span class="line">            while(low&lt;high &amp;&amp; arr[high].compareTo(pivot) == 1)&#123;</span><br><span class="line">                --high;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[low] = arr[high];</span><br><span class="line">            while(low &lt; high &amp;&amp; arr[low].compareTo(pivot) == -1)&#123;</span><br><span class="line">                ++low;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[high] = arr[low];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[low] = pivot;</span><br><span class="line">        return low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 快速排序</span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;? super T&gt;&gt; T[] quickSort(T[] arr)&#123;</span><br><span class="line">        return quickSort(arr, 0, arr.length - 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;? super T&gt;&gt; T[] quickSort(T [] arr, int low, int high)&#123;</span><br><span class="line">        if(low &lt; high)&#123;</span><br><span class="line">            int pivot = partition(arr, low, high);</span><br><span class="line">            quickSort(arr, low, pivot -1 );</span><br><span class="line">            quickSort(arr, pivot + 1, high);</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>*golang Utils.go**</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">type Utils struct&#123;&#125;</span><br><span class="line">func main()&#123;</span><br><span class="line">	var arr = []int&#123;10,9,8,7,6,5,4,3,2,1&#125;</span><br><span class="line">	fmt.Printf(&quot;arr before sort: %v\n&quot;, arr)</span><br><span class="line">	var u = Utils&#123;&#125;</span><br><span class="line">    //u.BubbleSort(arr)</span><br><span class="line">    //u.SelectSort(arr)</span><br><span class="line">    //u.InsertSort(arr)</span><br><span class="line">    u.QuickSort(arr, 0, len(arr) -1)</span><br><span class="line">	fmt.Printf(&quot;arr after sort: %v\n&quot;, arr)</span><br><span class="line">&#125;</span><br><span class="line">// 冒泡排序</span><br><span class="line">func(u *Utils) BubbleSort(arr []int) []int&#123;</span><br><span class="line">	arrLen := len(arr)</span><br><span class="line">	for i:=0; i&lt;arrLen;i++&#123;</span><br><span class="line">		for j:=0; j&lt;arrLen-i-1; j++&#123;</span><br><span class="line">			if arr[j] &gt; arr[j+1]&#123;</span><br><span class="line">				swap(arr, j, j+1)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 选择排序</span><br><span class="line">func(u *Utils)SelectSort(arr []int) []int&#123;</span><br><span class="line">	arrLen := len(arr)</span><br><span class="line">	for i:=0; i&lt;arrLen; i++&#123;</span><br><span class="line">		for j:=i+1; j&lt;arrLen; j++&#123;</span><br><span class="line">			if arr[i] &gt; arr[j]&#123;</span><br><span class="line">				swap(arr, i, j)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 插入排序</span><br><span class="line">func(u *Utils)InsertSort(arr []int)&#123;</span><br><span class="line">	var arrLen = len(arr)</span><br><span class="line">	for i:=0; i&lt;arrLen; i++&#123;</span><br><span class="line">		for j:=i; j&gt;0; j--&#123;</span><br><span class="line">			if arr[j] &lt; arr[j-1]&#123;</span><br><span class="line">				swap(arr, j, j-1)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//快排 分区 挖坑填坑大法</span><br><span class="line">func partition(arr[] int, low, high int) int&#123;</span><br><span class="line">	// 以最左边为基准值</span><br><span class="line">	pivot := arr[low]</span><br><span class="line">	for ;low&lt;high;&#123;</span><br><span class="line">		for low &lt; high &amp;&amp; arr[high] &gt; pivot&#123;</span><br><span class="line">			high--</span><br><span class="line">		&#125;</span><br><span class="line">		arr[low] = arr[high]</span><br><span class="line">		for low &lt; high &amp;&amp; arr[low] &lt; pivot&#123;</span><br><span class="line">			low++</span><br><span class="line">		&#125;</span><br><span class="line">		arr[high] = arr[low]</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	arr[low] = pivot</span><br><span class="line">	return low</span><br><span class="line">&#125;</span><br><span class="line">func(u *Utils)QuickSort(arr[] int, low, high int)&#123;</span><br><span class="line">	if(low &lt; high)&#123;</span><br><span class="line">		pivot := partition(arr, low, high)</span><br><span class="line">		var u = Utils&#123;&#125;</span><br><span class="line">		u.QuickSort(arr, low, pivot -1)</span><br><span class="line">		u.QuickSort(arr, pivot + 1, high)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">func swap(arr [] int, i, j int)&#123;</span><br><span class="line">	arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong><em>scala</em></strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Array.range</span><br><span class="line">object Utils&#123;</span><br><span class="line">    </span><br><span class="line">    def main(arg:Array[String]):Unit=&#123;</span><br><span class="line">        var arr = Array(10,9,8,7,6,5,4,3,2,1)</span><br><span class="line">        show(arr)</span><br><span class="line">        //selectSort(arr)</span><br><span class="line">        //bubbleSort(arr)</span><br><span class="line">        //insertSort(arr)</span><br><span class="line">        quickSort(arr, 0, arr.length -1)</span><br><span class="line">        println()</span><br><span class="line">        show(arr)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    def swap(arr : Array[Int], i:Int, j:Int):Unit=&#123;       </span><br><span class="line">        arr(i) = arr(i) ^ arr(j)</span><br><span class="line">        arr(j) = arr(i) ^ arr(j)</span><br><span class="line">        arr(i) = arr(i) ^ arr(j)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    def bubbleSort(arr:Array[Int])&#123;</span><br><span class="line">        for(i &lt;- 0 to arr.length-1; j &lt;- 0 until arr.length - i -1)&#123;</span><br><span class="line">                if(arr(j) &gt; arr(j+1))&#123;</span><br><span class="line">                    swap(arr, j, j+1)</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    def selectSort(arr:Array[Int]):Unit=&#123;</span><br><span class="line">        var arrLen = arr.length</span><br><span class="line">        for(i &lt;- range(0, arrLen, 1))&#123;</span><br><span class="line">            for(j &lt;- range(i+1, arrLen, 1))&#123;</span><br><span class="line">                if(arr(i) &gt; arr(j))&#123;</span><br><span class="line">                    swap(arr, i, j)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    def insertSort(arr:Array[Int])&#123;</span><br><span class="line">        for(i &lt;- 0 to (arr.length -1); j &lt;- range(i, 0, -1))&#123;</span><br><span class="line">            if(arr(j) &lt; arr(j-1))&#123;</span><br><span class="line">                swap(arr, j, j-1)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 快速排序</span><br><span class="line">    def partition(arr: Array[Int], low:Int, high:Int):Int=&#123;</span><br><span class="line">        var pivot = arr(low)</span><br><span class="line">        var left = low</span><br><span class="line">        var right = high</span><br><span class="line">        </span><br><span class="line">        while(left &lt; right)&#123;</span><br><span class="line">            while(left &lt; right &amp;&amp; arr(right) &gt; pivot)&#123;</span><br><span class="line">                right=right-1</span><br><span class="line">            &#125;</span><br><span class="line">            arr(left) = arr(right)</span><br><span class="line">            while(left &lt; right &amp;&amp; arr(left) &lt; pivot)&#123;</span><br><span class="line">                left=left+1</span><br><span class="line">            &#125;</span><br><span class="line">            arr(right) = arr(left)</span><br><span class="line">        &#125;</span><br><span class="line">        arr(left) = pivot</span><br><span class="line">        return left</span><br><span class="line">    &#125;</span><br><span class="line">    def quickSort(arr:Array[Int], low:Int, high:Int)&#123;</span><br><span class="line">        if(low &lt; high)&#123;</span><br><span class="line">            var pivot = partition(arr, low, high)</span><br><span class="line">            quickSort(arr, low, pivot - 1)</span><br><span class="line">            quickSort(arr, pivot+1, high)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    def show(arr : Array[Int])&#123;</span><br><span class="line">        for(x &lt;- arr)&#123;</span><br><span class="line">            print(x+&quot;,&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package com.ghc.algorithm</span><br><span class="line"></span><br><span class="line">object Sorter extends App &#123;</span><br><span class="line">  implicit val prefix = &quot;排序算法：&quot;</span><br><span class="line">  val arr:Array[Int] = (10 to 1 by -1).toArray</span><br><span class="line"></span><br><span class="line">  def bubbleSort(arr:Array[Int], name:String=&quot;冒泡排序&quot;): Unit =&#123;</span><br><span class="line">    println(s&quot;$prefix $name 开始了...&quot;)</span><br><span class="line">    for(i &lt;- 0 until arr.length; j&lt;-0 until arr.length-i-1)&#123;</span><br><span class="line">      if(arr(j) &gt; arr(j+1))&#123;</span><br><span class="line">        swap(arr, j, j+1)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(s&quot;$prefix $name 结束了...&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def selectSort(arr:Array[Int], name:String=&quot;选择排序&quot;): Unit =&#123;</span><br><span class="line">    println(s&quot;$prefix $name 开始了...&quot;)</span><br><span class="line">    for(i &lt;- 0 to arr.length -2; j&lt;- i+1 to arr.length-1)&#123;</span><br><span class="line">      if(arr(i) &gt; arr(j)) swap(arr, i, j)</span><br><span class="line">    &#125;</span><br><span class="line">    println(s&quot;$prefix $name 结束了...&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">    * 堆排序, 构建大顶堆，然后交换首尾下标 对应的值</span><br><span class="line">    * @param arr</span><br><span class="line">    * @param name</span><br><span class="line">    */</span><br><span class="line">  def heapSort(arr:Array[Int], name:String=&quot;改进版选择排序 =&gt; 堆排序&quot;):Unit=&#123;</span><br><span class="line">    println(s&quot;$prefix $name 开始了...&quot;)</span><br><span class="line">    for(dynamicMaxLength&lt;-arr.length to 2 by -1)&#123;</span><br><span class="line">      heapify(arr, dynamicMaxLength)</span><br><span class="line">      swap(arr, 0, dynamicMaxLength-1)</span><br><span class="line">    &#125;</span><br><span class="line">    println(s&quot;$prefix $name 结束了...&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">    * 功能单一，仅为构建大顶堆</span><br><span class="line">    * @param arr</span><br><span class="line">    * @param dynamicMaxLength</span><br><span class="line">    */</span><br><span class="line">  def heapify(arr:Array[Int], dynamicMaxLength:Int): Unit =&#123;</span><br><span class="line">    // 从最后 最右 一个非叶子节点  开始构建大顶堆或者小顶堆</span><br><span class="line">    for(p &lt;- (dynamicMaxLength/2 - 1) to 0 by -1)&#123;</span><br><span class="line">      // 如果 p 存在右子节点</span><br><span class="line">      if((2 * p + 2) &lt; dynamicMaxLength)&#123;</span><br><span class="line">        if(arr(2*p+1) &lt; arr(2*p+2)) swap(arr, 2*p+1, 2*p+2)</span><br><span class="line">      &#125;</span><br><span class="line">      if(arr(2*p+1) &gt; arr(p)) swap(arr, p, 2*p+1)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def insertSort(arr:Array[Int], name:String=&quot;插入排序&quot;):Unit =&#123;</span><br><span class="line">    println(s&quot;$prefix $name 开始了...&quot;)</span><br><span class="line">    for(i&lt;- 0 to arr.length-1;j&lt;-i to 1 by -1)&#123;</span><br><span class="line">      if(arr(j) &lt; arr(j-1)) swap(arr, j, j-1)</span><br><span class="line">    &#125;</span><br><span class="line">    println(s&quot;$prefix $name 结束了...&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">    * 改进版的插入排序， gap 由大到小, 3*h+1 的公式</span><br><span class="line">    * @param arr</span><br><span class="line">    * @param name</span><br><span class="line">    */</span><br><span class="line">  def shellSort(arr:Array[Int], name:String=&quot;改进版插入排序 =&gt; 希尔排序&quot;):Unit=&#123;</span><br><span class="line">    println(s&quot;$prefix $name 开始了...&quot;)</span><br><span class="line">    var h = 1</span><br><span class="line">    while(h&lt;=arr.length/3)&#123;</span><br><span class="line">      h = h*3 + 1</span><br><span class="line">    &#125;</span><br><span class="line">    var gap = h</span><br><span class="line">    while(gap &gt;= 1)&#123;</span><br><span class="line">      for(i &lt;- gap to arr.length-1; j&lt;- i to gap by -gap)&#123;</span><br><span class="line">        if(arr(j) &lt; arr(j-gap))</span><br><span class="line">          swap(arr, j, j-gap)</span><br><span class="line">      &#125;</span><br><span class="line">      gap = (gap-1)/3</span><br><span class="line">    &#125;</span><br><span class="line">    println(s&quot;$prefix $name 结束了...&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def quickSort(arr:Array[Int], name:String=&quot;快速排序&quot;): Unit =&#123;</span><br><span class="line">    println(s&quot;$prefix $name 开始了...&quot;)</span><br><span class="line">    quickSort(arr, 0, arr.length-1)</span><br><span class="line">    println(s&quot;$prefix $name 结束了...&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def quickSort(arr:Array[Int], left:Int, right:Int): Unit =&#123;</span><br><span class="line">    if(left &lt; right) &#123;</span><br><span class="line">      val pivot = partition(arr, left, right)</span><br><span class="line">      quickSort(arr, left, pivot-1)</span><br><span class="line">      quickSort(arr, pivot+1, right)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def partition(arr:Array[Int], low:Int, high:Int): Int =&#123;</span><br><span class="line">    val pivot = arr(low)</span><br><span class="line">    var left = low</span><br><span class="line">    var right = high</span><br><span class="line"></span><br><span class="line">    while(left &lt; right)&#123;</span><br><span class="line">      while(left &lt; right &amp;&amp; arr(right) &gt; pivot)&#123;</span><br><span class="line">        right -= 1</span><br><span class="line">      &#125;</span><br><span class="line">      arr(left) = arr(right)</span><br><span class="line">      while(left &lt; right &amp;&amp; arr(left) &lt; pivot)&#123;</span><br><span class="line">        left += 1</span><br><span class="line">      &#125;</span><br><span class="line">      arr(right) = arr(left)</span><br><span class="line">    &#125;</span><br><span class="line">    arr(left) = pivot</span><br><span class="line">    left</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def mergeSort(arr:Array[Int], name:String=&quot;归并排序&quot;): Unit =&#123;</span><br><span class="line">    println(s&quot;$prefix $name 开始了...&quot;)</span><br><span class="line">    mergeSort(arr, 0, arr.length-1)</span><br><span class="line">    println(s&quot;$prefix $name 结束了...&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">    * 原理是 左右两边先有序，然后合并， 快排则是 找中分轴然后分治</span><br><span class="line">    * @param arr</span><br><span class="line">    * @param left</span><br><span class="line">    * @param right</span><br><span class="line">    */</span><br><span class="line">  def mergeSort(arr:Array[Int], left:Int, right:Int): Unit =&#123;</span><br><span class="line">    if(left &lt; right)&#123;</span><br><span class="line">      val mid = left + ((right - left) /2)</span><br><span class="line">      mergeSort(arr, left, mid)</span><br><span class="line">      mergeSort(arr, mid+1, right)</span><br><span class="line">      merge(arr, left, mid+1, right)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def merge(arr:Array[Int], left:Int, right:Int, rightBounds:Int): Unit =&#123;</span><br><span class="line">    var i = left</span><br><span class="line">    var j = right</span><br><span class="line">    val mid = right-1</span><br><span class="line">    var k = 0</span><br><span class="line">//    println(s&quot;$left |$mid| $rightBounds&quot;)</span><br><span class="line">    var count = (rightBounds - left +1)</span><br><span class="line">//    print(s&quot;count: $count&quot;)</span><br><span class="line">    val temp:Array[Int] = new Array[Int](count)</span><br><span class="line">    while (i &lt;= mid &amp;&amp; j &lt;= rightBounds) &#123;</span><br><span class="line">//      println(s&quot;$&#123;arr(i)&#125; &lt;= $&#123;arr(j)&#125; : $&#123;arr(i) &lt;= arr(j)&#125;&quot;)</span><br><span class="line">      arr(i) &lt;= arr(j) match &#123;</span><br><span class="line">        case true =&gt; &#123;</span><br><span class="line">          temp(k) = arr(i)</span><br><span class="line">          k += 1</span><br><span class="line">          i += 1</span><br><span class="line">        &#125;</span><br><span class="line">        case false =&gt; &#123;</span><br><span class="line">          temp(k) = arr(j)</span><br><span class="line">          k += 1</span><br><span class="line">          j += 1</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    while (i &lt;= mid) &#123;</span><br><span class="line">      temp(k) = arr(i)</span><br><span class="line">      k += 1</span><br><span class="line">      i += 1</span><br><span class="line">    &#125;</span><br><span class="line">    while (j &lt;= rightBounds) &#123;</span><br><span class="line">      temp(k) = arr(j)</span><br><span class="line">      k += 1</span><br><span class="line">      j += 1</span><br><span class="line">    &#125;</span><br><span class="line">    for (m &lt;- 0 to temp.length - 1) &#123;</span><br><span class="line">      arr(left + m) = temp(m)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def countSort(arr:Array[Int], name:String=&quot;计数排序 --》 感觉好傻的亚子&quot;): Unit =&#123;</span><br><span class="line">    println(s&quot;$prefix $name 开始了...&quot;)</span><br><span class="line">    val count = new Array[Int](arr.max+1)</span><br><span class="line">    val result = new Array[Int](arr.length)</span><br><span class="line"></span><br><span class="line">    for(i &lt;- 0 to arr.length-1)&#123;</span><br><span class="line">      count(arr(i))+=1</span><br><span class="line">    &#125;</span><br><span class="line">    var m = 0</span><br><span class="line">    for(j &lt;- 0 to count.length-1)&#123;</span><br><span class="line">      if(count(j) &gt; 0)&#123;</span><br><span class="line">        for(k &lt;- count(j) until 0 by -1)&#123;</span><br><span class="line">          result(m) = j</span><br><span class="line">          m+=1</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i &lt;- 0 to arr.length-1)&#123;</span><br><span class="line">      arr(i) = result(i)</span><br><span class="line">    &#125;</span><br><span class="line">    println(s&quot;$prefix $name 结束了...&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def swap(arr:Array[Int], i:Int, j:Int): Unit =&#123;</span><br><span class="line">    arr(i) = arr(i) ^ arr(j)</span><br><span class="line">    arr(j) = arr(i) ^ arr(j)</span><br><span class="line">    arr(i) = arr(i) ^ arr(j)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def showArr(arr:Array[Int]):Unit=&#123;</span><br><span class="line">    println(arr.mkString(&quot;&lt;&quot;,&quot;,&quot;,&quot;&gt;&quot;))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  showArr(arr)</span><br><span class="line">  bubbleSort(arr)</span><br><span class="line">  selectSort(arr)</span><br><span class="line">  insertSort(arr)</span><br><span class="line">  shellSort(arr)</span><br><span class="line">  quickSort(arr)</span><br><span class="line">  heapSort(arr)</span><br><span class="line">  mergeSort(arr)</span><br><span class="line">  countSort(arr)</span><br><span class="line">  showArr(arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import Array.range</span><br><span class="line">object Demo&#123;</span><br><span class="line">    def main(args:Array[String]):Unit=&#123;</span><br><span class="line">        for(i &lt;- range(1,10,1))&#123;</span><br><span class="line">            println(i+&quot;! = &quot;+factorial2(n=i))</span><br><span class="line">        &#125;</span><br><span class="line">        printLangs(&quot;golang&quot;, &quot;java&quot;, &quot;python&quot;, &quot;scala&quot;)</span><br><span class="line">        val result = apply(layout, 10)</span><br><span class="line">        println(result)</span><br><span class="line">        println(inc(7)-1)</span><br><span class="line">        </span><br><span class="line">        println(&quot;1+3 = &quot;+add(1)(3))</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     // 可变参数</span><br><span class="line">     def printLangs(langs:String*):Unit=&#123;</span><br><span class="line">         for(lang &lt;- langs)&#123;</span><br><span class="line">             println(lang);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     // 函数递归</span><br><span class="line">     def factorial(n:BigInt, prod:BigInt=1):BigInt=&#123;</span><br><span class="line">        if(n&lt;1)&#123;</span><br><span class="line">            return prod</span><br><span class="line">        &#125;</span><br><span class="line">        return factorial(n-1, n*prod)</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     // 函数嵌套 阶乘 </span><br><span class="line">     def factorial2(n:BigInt):BigInt = &#123;</span><br><span class="line">        def fact(n:BigInt, accumulator:BigInt):BigInt=&#123;</span><br><span class="line">            if(n&lt;=1) return accumulator</span><br><span class="line">            return fact(n-1, n*accumulator)</span><br><span class="line">        &#125;</span><br><span class="line">        return fact(n, 1)</span><br><span class="line">     &#125;</span><br><span class="line">     // 高阶函数</span><br><span class="line">     def apply(f: Int =&gt; String, v:Int) = f(v)</span><br><span class="line">     def layout(n:Int):String = &#123;</span><br><span class="line">         return &quot;[&quot;+n+&quot;]&quot;</span><br><span class="line">     &#125;</span><br><span class="line">     // 匿名函数</span><br><span class="line">     var inc = (x:Int) =&gt; x+1</span><br><span class="line">     </span><br><span class="line">     // 柯里化</span><br><span class="line">     def add(x:Int) = (y:Int) =&gt; x+y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import scala.util.control.Breaks</span><br><span class="line"></span><br><span class="line">object Test &#123;</span><br><span class="line">  def main(args: Array[String]):Unit=&#123;</span><br><span class="line">    var arr = Array(10,9,7,5,4,3,2,1)</span><br><span class="line">    show(arr)</span><br><span class="line">    println()</span><br><span class="line">//    bubbleSort(arr)</span><br><span class="line">//    selectSort(arr)</span><br><span class="line">//    insertSort(arr)</span><br><span class="line">//    quickSort(arr)</span><br><span class="line">    shellSort(arr)</span><br><span class="line">    show(arr)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def show:Array[Int] =&gt; Unit = (arr) =&gt;&#123;</span><br><span class="line">    for(e &lt;- arr)&#123;</span><br><span class="line">      print(e+&quot;,&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  val swap:(Array[Int], Int, Int) =&gt; Unit = (arr, i, j) =&gt;&#123;</span><br><span class="line">    arr(i) = arr(i) ^ arr(j)</span><br><span class="line">    arr(j) = arr(i) ^ arr(j)</span><br><span class="line">    arr(i) = arr(i) ^ arr(j)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def bubbleSort(ints: Array[Int]):Unit=&#123;</span><br><span class="line">    var arrLen = ints.length;</span><br><span class="line">    for(i &lt;- 0 until arrLen; j &lt;- 0 until (arrLen -i -1))&#123;</span><br><span class="line">      if(ints(j) &gt; ints(j+1))&#123;</span><br><span class="line">        swap(ints, j, j+1)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def selectSort(arr:Array[Int]):Unit=&#123;</span><br><span class="line">     for(i &lt;- 0 to arr.length-1; j &lt;- i to arr.length-1)&#123;</span><br><span class="line">       if(arr(i) &gt; arr(j))&#123;</span><br><span class="line">         swap(arr, i, j)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def insertSort(arr:Array[Int]):Unit=&#123;</span><br><span class="line">    for(i &lt;- 0 until arr.length; j&lt;- Range(i, 0, -1))&#123;</span><br><span class="line">      if(arr(j-1) &gt; arr(j))&#123;</span><br><span class="line">        swap(arr, j, j-1)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def shellSort(arr:Array[Int]):Unit=&#123;</span><br><span class="line">    var h = 1</span><br><span class="line">    while(h &lt; arr.length/3)&#123;</span><br><span class="line">      h = h*3 + 1</span><br><span class="line">    &#125;</span><br><span class="line">    var gap  = h</span><br><span class="line">    var loop = new Breaks</span><br><span class="line">    while(gap &gt; 0)&#123;</span><br><span class="line">//      loop.breakable(</span><br><span class="line">//        if(gap == 0) &#123;</span><br><span class="line">//          gap = 1</span><br><span class="line"></span><br><span class="line">          for(i &lt;- Range(gap, arr.length, 1); j&lt;- Range(i, gap-1, -gap))&#123;</span><br><span class="line">            if(arr(j) &lt; arr(j-gap))&#123;</span><br><span class="line">              swap(arr, j, j-gap)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">//            loop.break()</span><br><span class="line">//        &#125;</span><br><span class="line">//      )</span><br><span class="line">//      show(arr)</span><br><span class="line">//      println(&quot;gap: &quot;+gap)</span><br><span class="line">      gap = (gap -1)/3</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def partition(arr:Array[Int], low:Int, high:Int):Int =&#123;</span><br><span class="line">    var left = low</span><br><span class="line">    var right = high</span><br><span class="line">    var pivot = arr(left)</span><br><span class="line">    while(left &lt; right)&#123;</span><br><span class="line">        while(left &lt; high &amp;&amp; arr(right) &gt; pivot)&#123;</span><br><span class="line">            right -= 1</span><br><span class="line">        &#125;</span><br><span class="line">       arr(left) = arr(right)</span><br><span class="line">        while(left&lt;high &amp;&amp; arr(left) &lt; pivot)&#123;</span><br><span class="line">            left += 1</span><br><span class="line">        &#125;</span><br><span class="line">        arr(right) = arr(left)</span><br><span class="line">    &#125;</span><br><span class="line">    arr(left) = pivot</span><br><span class="line">    left</span><br><span class="line">  &#125;</span><br><span class="line">  def quickSort(ints: Array[Int]): Unit =&#123;</span><br><span class="line">    quickSort(ints, 0, ints.length -1)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def quickSort(arr:Array[Int], low:Int, high:Int): Unit =&#123;</span><br><span class="line">    if(low &lt; high)&#123;</span><br><span class="line">      val pivot = partition(arr, low, high)</span><br><span class="line">      quickSort(arr, low, pivot -1)</span><br><span class="line">      quickSort(arr, pivot +1, high)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="无力吐槽的-shell-正常人谁这么干呐"><a href="#无力吐槽的-shell-正常人谁这么干呐" class="headerlink" title="无力吐槽的 shell 正常人谁这么干呐"></a>无力吐槽的 shell 正常人谁这么干呐</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">arr=(10 9 8 7 6 5 4 3 2 1)</span><br><span class="line">len=$&#123;#arr[*]&#125;</span><br><span class="line"></span><br><span class="line">for((i=0;i&lt;len;i++))    #冒泡排序算法…注意：for语句后面跟“双圆括号”</span><br><span class="line">do</span><br><span class="line">    for((j=0;j&lt;len-i-1;j++))</span><br><span class="line">    do</span><br><span class="line">        t=$[$j+1]     #为了改进程序的可读性，使用变量t 来表示&quot;arr(j+1)元素&quot;</span><br><span class="line">        if [[ $&#123;arr[$j]&#125;  -gt $&#123;arr[$t]&#125; ]]   #双方括号表示条件运算 与其中的表达式之间必须有空格，-gt表示大于</span><br><span class="line">        #if [[ $&#123;arr[$j]&#125;  -gt $&#123;arr[$[$j+1]&#125; ]]  #这是 不使用变量t的写法，&quot;arr(j+1)元素&quot;有点不直观</span><br><span class="line">了</span><br><span class="line">        then</span><br><span class="line">              term=$&#123;arr[$j]&#125;</span><br><span class="line">              arr[$j]=$&#123;arr[$t]&#125;</span><br><span class="line">              arr[$t]=$term</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for x in $&#123;arr[@]&#125;</span><br><span class="line">do</span><br><span class="line">    echo $x</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">function main()&#123;</span><br><span class="line">    showArr $1</span><br><span class="line">    breakRows 10  </span><br><span class="line">    bubbleSort $1</span><br><span class="line">    echo $?</span><br><span class="line">    echo </span><br><span class="line">    showArr $?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function breakRows()&#123;</span><br><span class="line">    for i in `seq 0 $i`</span><br><span class="line">    do</span><br><span class="line">        echo </span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function bubbleSort()&#123;</span><br><span class="line">    arr=$1</span><br><span class="line">    len=$&#123;#arr[*]&#125;</span><br><span class="line">    for i in `seq 0 $&#123;len-1&#125;`;</span><br><span class="line">    do</span><br><span class="line">       for j in `seq 0 $&#123;len-2-i&#125;`</span><br><span class="line">           do</span><br><span class="line">               if [[ $&#123;arr[$j]&#125; -gt $&#123;arr[$j+1]&#125; ]]</span><br><span class="line">               then</span><br><span class="line">#                   t=$[$j+1]</span><br><span class="line">                   tmp=$&#123;arr[$j]&#125;</span><br><span class="line">                   arr[$j]=$&#123;arr[$[$j+1]]&#125;</span><br><span class="line">                   arr[$j+1]=$tmp</span><br><span class="line">               fi              </span><br><span class="line"> </span><br><span class="line">           done</span><br><span class="line">    done   </span><br><span class="line">    return $arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function showArr()&#123;</span><br><span class="line">    arr=$1</span><br><span class="line">    for e in $&#123;arr[*]&#125;</span><br><span class="line">    do</span><br><span class="line">        echo $e</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line">arr=(10 9 8 7 6 5 4 3 2 1)</span><br><span class="line">main $arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line"></span><br><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">for i in `seq 1 9`</span><br><span class="line">do</span><br><span class="line">    for j in `seq 1 $i`</span><br><span class="line">    do</span><br><span class="line">      echo -ne &quot;$i * $j = $[$i * $j]\t&quot;</span><br><span class="line">    done</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 结尾， python 最好不写分号</span><br><span class="line"></span><br><span class="line">def bubbleSort(arr):</span><br><span class="line">    arr_len = len(arr)</span><br><span class="line">    for i in range(0, arr_len, 1):</span><br><span class="line">        for j in range(0, arr_len-1-i,1):</span><br><span class="line">            if arr[j] &gt; arr[j+1]:</span><br><span class="line">                arr[j], arr[j+1] = arr[j+1], arr[j]</span><br><span class="line"></span><br><span class="line">def selectSort(arr):</span><br><span class="line">    arr_len = len(arr)</span><br><span class="line">    for i in range(0, arr_len, 1):</span><br><span class="line">        for j in range(i+1, arr_len, 1):</span><br><span class="line">            if arr[i] &gt; arr[j]:</span><br><span class="line">                arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line"></span><br><span class="line">def inserSort(arr):</span><br><span class="line">    arr_len = len(arr)</span><br><span class="line">    for i in range(0, arr_len, 1):</span><br><span class="line">        for j in range(i, 0, -1):</span><br><span class="line">            if arr[j] &lt; arr[j-1]:</span><br><span class="line">                arr[j], arr[j-1] = arr[j-1], arr[j]</span><br><span class="line"></span><br><span class="line">def shellSort(arr):</span><br><span class="line">    h = 1</span><br><span class="line">    arr_len = len(arr)</span><br><span class="line">    while True:</span><br><span class="line">        if h&gt;arr_len:</span><br><span class="line">            break</span><br><span class="line">        h = h*3 + 1</span><br><span class="line">    gap = int(h)</span><br><span class="line">    while gap &gt; 0:</span><br><span class="line">        for i in range(gap, arr_len, 1):</span><br><span class="line">            for j in range(i, gap-1, -gap):</span><br><span class="line">                if arr[j] &lt; arr[j-gap]:</span><br><span class="line">                    arr[j], arr[j-gap] = arr[j-gap], arr[j]</span><br><span class="line">        gap = int((gap -1) /3)</span><br><span class="line"></span><br><span class="line"># 分区函数</span><br><span class="line">def partition(arr, low, high):</span><br><span class="line">    pivot = arr[low]</span><br><span class="line">    while low &lt; high:</span><br><span class="line">        while low &lt; high and arr[high] &gt; pivot:</span><br><span class="line">            high -= 1</span><br><span class="line">        arr[low] = arr[high]</span><br><span class="line">        while low &lt; high and arr[low] &lt;= pivot:</span><br><span class="line">            low += 1</span><br><span class="line">        arr[high] = arr[low]</span><br><span class="line">    arr[low] = pivot</span><br><span class="line">    # print(arr)</span><br><span class="line">    return low</span><br><span class="line"></span><br><span class="line"># 快排</span><br><span class="line">def quickSort(arr, low, high):</span><br><span class="line">    low = 0 if low == None else low</span><br><span class="line">    high = (high, len(arr) - 1)[high == None]  # 小中 False True</span><br><span class="line">    if low &lt; high:</span><br><span class="line">        pivot = partition(arr, low, high)</span><br><span class="line">        quickSort(arr, low, pivot - 1)</span><br><span class="line">        quickSort(arr, pivot+1, high)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return arr</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    arr = [10,9,8,7,6,5,4,3,2,1]</span><br><span class="line">    print(arr)</span><br><span class="line">    # bubbleSort(arr)</span><br><span class="line">    # selectSort(arr)</span><br><span class="line">    # inserSort(arr)</span><br><span class="line">    # shellSort(arr)</span><br><span class="line">    quickSort(arr, 0, len(arr) - 1)</span><br><span class="line">    print(arr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// golang 结尾 最好不写分号</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    fmt.Printf(&quot;%s\n&quot;, &quot;hello world&quot;)</span><br><span class="line">    arr := []int&#123;10,9,8,7,6,5,4,3,2,1&#125;</span><br><span class="line">    fmt.Printf(&quot;before sort: %v\n&quot;, arr)</span><br><span class="line">    fmt.Printf(&quot;after sort: %v &quot;,BubbleSort(arr))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func BubbleSort(arr []int) []int&#123;</span><br><span class="line">    arrLen := len(arr)</span><br><span class="line">    for i:=0; i&lt;arrLen;i++&#123;</span><br><span class="line">        for j:=0; j&lt;arrLen-1-i;j++&#123;</span><br><span class="line">            if arr[j] &gt; arr[j+1]&#123;</span><br><span class="line">                arr[j], arr[j+1] = arr[j+1], arr[j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//scala 结尾最好不写分号</span><br><span class="line">object&#123;</span><br><span class="line">    def main(args:Array[String]):Unit=&#123;</span><br><span class="line">        println(&quot;hello world的！!&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// java , javascript 结尾写分号</span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/636379/202007/636379-20200727085854047-1974690131.png" alt=""></p>
<h3 id="提升-shell-颜值"><a href="#提升-shell-颜值" class="headerlink" title="提升 shell  颜值"></a>提升 shell  颜值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#author Frank</span><br><span class="line">#date 2020/07/26</span><br><span class="line">#functionality: 用于熟悉 shell 指令</span><br><span class="line"></span><br><span class="line">:&lt;&lt;EOF</span><br><span class="line">  排序算法 shell 版本</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># :noh 取消由于 # 引起的 恶心高亮</span><br><span class="line">#定义颜色变量</span><br><span class="line">RED=&apos;\E[1;31m&apos;      # 红</span><br><span class="line">GREEN=&apos;\E[1;32m&apos;    # 绿</span><br><span class="line">YELLOW=&apos;\E[1;33m&apos;    # 黄</span><br><span class="line">BLUE=&apos;\E[1;34m&apos;     # 蓝</span><br><span class="line">PINK=&apos;\E[1;35m&apos;     # 粉红</span><br><span class="line">RES=&apos;\E[0m&apos;         # 清除颜色</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;RED&#125; 本脚本用来做排序算法展示 $&#123;RES&#125;&quot;</span><br><span class="line"></span><br><span class="line"># main 函数作为脚本入口</span><br><span class="line">function main()&#123;</span><br><span class="line">    arr=$1</span><br><span class="line">    origin_arr=$1</span><br><span class="line">    echo -e &quot;$&#123;GREEN&#125; 排序前: $&#123;arr[*]&#125; $&#123;RES&#125;&quot;</span><br><span class="line">    while true</span><br><span class="line">    do</span><br><span class="line">        echo -e &quot;</span><br><span class="line">                 $&#123;YELLOW&#125; 1) 冒泡排序 $&#123;RES&#125;</span><br><span class="line">                 $&#123;GREEN&#125; 2）选择排序 $&#123;RES&#125;</span><br><span class="line">                 $&#123;PINK&#125; 3) 插入排序 $&#123;PINK&#125;</span><br><span class="line">                 $&#123;BLUE&#125; 4) 希尔排序 $&#123;RES&#125;</span><br><span class="line">                 $&#123;RED&#125; x) 将在未来支持更多排序算法... $&#123;RES&#125;</span><br><span class="line">                 $&#123;YELLOW&#125; hints: qu it|QUIT|Quit|q|Q to exit $&#123;RES&#125;&quot;</span><br><span class="line"></span><br><span class="line">        echo &quot;&quot;        </span><br><span class="line">        read -p &quot;请输入数字选择对应的排序算法:&quot; num</span><br><span class="line">         </span><br><span class="line">        arr=(10 9 8 7 6 5 4 3 2 1) #$origin_arr</span><br><span class="line">        case $num in</span><br><span class="line">        1) bubbleSort $arr;;</span><br><span class="line">        2) selectSort $arr;;</span><br><span class="line">        3) insertSort $arr;;</span><br><span class="line">        4) shellSort $arr;;</span><br><span class="line">        [qQ]) break;; # 此处跳出的是 while 循环，否则 在 case 里没有意义</span><br><span class="line">        quit|QUIT|Quit) break;; # 此处跳出的是 while 循环，否则 在 case 里没有意义</span><br><span class="line">        *) clear &amp;&amp; echo -e &quot;$&#123;RED&#125; 将在未来支持更多算法...敬请等待... $&#123;RES&#125;&quot;</span><br><span class="line">           continue;;</span><br><span class="line">        esac</span><br><span class="line">        echo -e &quot;$&#123;BLUE&#125; 排序后  arr: $&#123;arr[@]&#125; $&#123;RES&#125;&quot;</span><br><span class="line">    done</span><br><span class="line">    #bubbleSort $arr</span><br><span class="line">    #selectSort $&#123;arr&#125;</span><br><span class="line">    #echo -e &quot;$&#123;BLUE&#125; after sort  arr: $&#123;arr[@]&#125; $&#123;RES&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function swapArr()&#123;</span><br><span class="line">    arr=$1</span><br><span class="line">    m=$2</span><br><span class="line">    n=$3</span><br><span class="line">    tmp=$&#123;arr[m]&#125;</span><br><span class="line">    arr[m]=$&#123;arr[n]&#125;</span><br><span class="line">    arr[n]=$tmp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 冒泡排序</span><br><span class="line">function bubbleSort()&#123;</span><br><span class="line">    arr=$1</span><br><span class="line">    arrLen=$&#123;#arr[@]&#125;</span><br><span class="line">    for i in `seq 0 $&#123;arrLen-1&#125;`</span><br><span class="line">    do</span><br><span class="line">        for j in `seq 0 $&#123;arrLen-i-1&#125;`</span><br><span class="line">        do</span><br><span class="line">            if [[ $&#123;arr[j]&#125; -gt $&#123;arr[j+1]&#125; ]]</span><br><span class="line">            then</span><br><span class="line">                swapArr $arr $i $j</span><br><span class="line">                #tmp=$&#123;arr[j]&#125;</span><br><span class="line">                #arr[j]=$&#123;arr[j+1]&#125;</span><br><span class="line">                #arr[j+1]=$tmp         </span><br><span class="line">            fi</span><br><span class="line">        done</span><br><span class="line">    done</span><br><span class="line">    #echo -e &quot;$&#123;PINK&#125; arr: $&#123;arr[@]&#125; $&#123;RES&#125;&quot;   </span><br><span class="line">    return $arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#选择排序</span><br><span class="line">function selectSort()&#123;</span><br><span class="line">    arr=$1</span><br><span class="line">    arrLen=$&#123;#arr[*]&#125;</span><br><span class="line">    for((i=0;i&lt;$&#123;arrLen&#125;;i++))</span><br><span class="line">    do</span><br><span class="line">        for((j=i+1;j&lt;$&#123;arrLen&#125;;j++))</span><br><span class="line">        do</span><br><span class="line">            if test $[arr[i]] -gt $[arr[j]]</span><br><span class="line">            then</span><br><span class="line">                swapArr $arr $&#123;i&#125; $&#123;j&#125;</span><br><span class="line">            fi            </span><br><span class="line">        done</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 插入排序</span><br><span class="line">function insertSort()&#123;</span><br><span class="line">    arr=$1</span><br><span class="line">    arrLen=$&#123;#arr[*]&#125;</span><br><span class="line">    for((i=0;i&lt;arrLen;i++))</span><br><span class="line">    do</span><br><span class="line">        for((j=i;j&gt;0;j--))</span><br><span class="line">        do  </span><br><span class="line">            if [[ $&#123;arr[j]&#125; -lt $&#123;arr[j-1]&#125; ]]</span><br><span class="line">            then</span><br><span class="line">                echo &quot; $&#123;arr[*]&#125; -&gt; arr[j]: $&#123;arr[j]&#125; , arr[j-1]: $&#123;arr[j-1]&#125;&quot;</span><br><span class="line">                tmp=$&#123;arr[j]&#125;</span><br><span class="line">                arr[j]=$&#123;arr[j-1]&#125;</span><br><span class="line">                arr[j-1]=$tmp</span><br><span class="line">                #echo &quot;$&#123;j&#125; --&gt; $&#123;j-1&#125;&quot;</span><br><span class="line">                #swapArr $&#123;arr[*]&#125; $j $&#123;j-1&#125;</span><br><span class="line">            fi</span><br><span class="line">        done</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># shell 排序</span><br><span class="line">function shellSort()&#123;</span><br><span class="line">    h=0</span><br><span class="line">    arr=$1</span><br><span class="line">    arrLen=$&#123;#arr[*]&#125;</span><br><span class="line">    while [[ h -lt $[$arrLen/3] ]]</span><br><span class="line">    do</span><br><span class="line">        h=$[$h*3 + 1]</span><br><span class="line">    done</span><br><span class="line">    </span><br><span class="line">    gap=h</span><br><span class="line">    while [[ gap -gt 0 ]]</span><br><span class="line">    do</span><br><span class="line">        #gap=$[($gap-1)/3]</span><br><span class="line">        for((i=gap;i&lt;arrLen;i++))</span><br><span class="line">        do</span><br><span class="line">            for((j=i;j&gt;gap-1;j=j-gap))</span><br><span class="line">            do</span><br><span class="line">                </span><br><span class="line">                if [[ $&#123;arr[j]&#125; -lt $&#123;arr[j-gap]&#125; ]]</span><br><span class="line">                then</span><br><span class="line">                    echo &quot; $&#123;arr[*]&#125; -&gt; arr[j]: $&#123;arr[j]&#125; , arr[j-gap]: $&#123;arr[j-gap]&#125;&quot;</span><br><span class="line">                    tmp=$&#123;arr[j]&#125;</span><br><span class="line">                    arr[j]=$&#123;arr[j-gap]&#125;</span><br><span class="line">                    arr[j-gap]=$tmp</span><br><span class="line">                fi</span><br><span class="line">            done</span><br><span class="line">        done</span><br><span class="line">       gap=$[($gap-1)/3]</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 快速排序</span><br><span class="line">#function partition()&#123;&#125;</span><br><span class="line"></span><br><span class="line">#function quickSort()&#123;&#125;</span><br><span class="line"></span><br><span class="line">arr=(10 9 8 7 6 5 4 3 2 1)</span><br><span class="line">main $arr</span><br></pre></td></tr></table></figure>
<h1 id="java-改进版本"><a href="#java-改进版本" class="headerlink" title="java 改进版本"></a>java 改进版本</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.ghc.utils;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">public class SortAlgorithm &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Integer [] array = randomArray(20);</span><br><span class="line">        System.out.println(&quot;排序前: &quot; + Arrays.toString(array));</span><br><span class="line">//        quickSort(array);</span><br><span class="line">//        mergeSort(array);</span><br><span class="line">        heapSort(array);</span><br><span class="line">//        shellSort(array);</span><br><span class="line">//        bubbleSort(array);</span><br><span class="line">//        selectSort(array);</span><br><span class="line">//        insertSort(array);</span><br><span class="line">        System.out.println(&quot;排序后: &quot;+ Arrays.toString(array));</span><br><span class="line">        loopCheck(array, 1000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void loopCheck(Integer[] array, int times)&#123;</span><br><span class="line">        boolean flag = true;</span><br><span class="line">        for(int i=0; i&lt;times; i++) &#123;</span><br><span class="line">            Integer[] arrayCopy = new Integer[array.length];</span><br><span class="line">            System.arraycopy(array, 0, arrayCopy, 0, array.length);</span><br><span class="line">            Arrays.sort(arrayCopy);</span><br><span class="line">            flag = checkArrayEquals(array, arrayCopy);</span><br><span class="line">            if (!flag) &#123;</span><br><span class="line">                System.out.println(&quot;not equal!&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;equals: &quot;+ flag);</span><br><span class="line">    &#125;</span><br><span class="line">    public static Integer[] randomArray(int len)&#123;</span><br><span class="line">        Integer [] array = new Integer[len];</span><br><span class="line">        Random random = new Random();</span><br><span class="line">        for(int i=0; i&lt;len; i++)&#123;</span><br><span class="line">            array[i] = random.nextInt(50);</span><br><span class="line">        &#125;</span><br><span class="line">        return array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;T&gt;&gt; boolean checkArrayEquals(T[] array, T[] array2)&#123;</span><br><span class="line">        boolean flag = true;</span><br><span class="line">        for(int i=0; i&lt;array.length; i++)&#123;</span><br><span class="line">            if(array[i].compareTo(array2[i]) != 0) &#123;</span><br><span class="line">                flag = false;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;T&gt;&gt; void quickSort(T[] array)&#123;</span><br><span class="line">        quickSort(array, 0, array.length - 1);</span><br><span class="line">    &#125;</span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;T&gt;&gt; void quickSort(T[] array, int left, int right)&#123;</span><br><span class="line">        if(left &lt; right)&#123;</span><br><span class="line">            int pivot = partition(array, left, right);</span><br><span class="line">            quickSort(array, left, pivot - 1);</span><br><span class="line">            quickSort(array, pivot + 1, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;T&gt;&gt; int partition(T[] array, int left, int right)&#123;</span><br><span class="line">        T pivot = array[left];</span><br><span class="line">        while(left &lt; right)&#123;</span><br><span class="line">            while(left &lt; right &amp;&amp; array[right].compareTo(pivot) &gt;= 0)&#123;</span><br><span class="line">                right --;</span><br><span class="line">            &#125;</span><br><span class="line">            array[left] = array[right];</span><br><span class="line">            while(left &lt; right &amp;&amp; array[left].compareTo(pivot) == -1)&#123;</span><br><span class="line">                left ++;</span><br><span class="line">            &#125;</span><br><span class="line">            array[right] = array[left];</span><br><span class="line">        &#125;</span><br><span class="line">        array[left] = pivot;</span><br><span class="line">        return left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;T&gt;&gt; void heapSort(T[] array)&#123;</span><br><span class="line">        for(int i=array.length - 1;i&gt;0; i--)&#123;</span><br><span class="line">            maxHeap(array, i);</span><br><span class="line">            swap(array, 0, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;T&gt;&gt; void maxHeap(T[] array, int endPtr)&#123;</span><br><span class="line">        int lastPar = endPtr % 2 !=0 ? endPtr &gt;&gt; 1: (endPtr &gt;&gt; 1) -1;</span><br><span class="line">        for(int i=lastPar; i&gt;=0; i--)&#123;</span><br><span class="line">            if(2*i+2 &lt;= endPtr &amp;&amp; array[2*i+2].compareTo(array[i]) == 1)&#123;</span><br><span class="line">                swap(array, i, 2*i+2);</span><br><span class="line">            &#125;</span><br><span class="line">            if(array[2*i+1].compareTo(array[i]) == 1)&#123;</span><br><span class="line">                swap(array, i, 2*i+1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;T&gt;&gt; void swap(T[] array, int i, int j)&#123;</span><br><span class="line">        T temp = array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;T&gt;&gt; void mergeSort(T[] array)&#123;</span><br><span class="line">        mergeSort(array, 0, array.length - 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;T&gt;&gt; void mergeSort(T[] array, int left, int right)&#123;</span><br><span class="line">        if(left &lt; right)&#123;</span><br><span class="line">            int mid = left + ((right - left) &gt;&gt; 1);</span><br><span class="line">            mergeSort(array, left, mid);</span><br><span class="line">            mergeSort(array, mid+1, right);</span><br><span class="line">            merge(array, left, mid+1, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;T&gt;&gt; void merge(T[] array, int left, int right, int rightBounds)&#123;</span><br><span class="line">        int i = left;</span><br><span class="line">        int j = right;</span><br><span class="line">        int mid = right - 1;</span><br><span class="line">        int k = 0;</span><br><span class="line">        int count = rightBounds - left + 1;</span><br><span class="line">        T[] temp = Arrays.copyOf(array, count);</span><br><span class="line">        while(i &lt;= mid &amp;&amp; j &lt;= rightBounds)&#123;</span><br><span class="line">            temp[k++] = array[i].compareTo(array[j]) &lt;= 0 ? array[i++]:array[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        while(i &lt;= mid)&#123;</span><br><span class="line">            temp[k++] = array[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        while(j &lt;= rightBounds)&#123;</span><br><span class="line">            temp[k++] = array[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        for(int m=0; m&lt;count; m++)&#123;</span><br><span class="line">            array[left+m] = temp[m];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;T&gt;&gt; void shellSort(T[] array)&#123;</span><br><span class="line">        int h = 1;</span><br><span class="line">        while(h &lt; array.length / 3)&#123;</span><br><span class="line">            h = 3*h + 1;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int gap=h; gap &gt;= 1; gap=(gap-1)/3)&#123;</span><br><span class="line">            for(int i=0; i&lt;array.length; i++)&#123;</span><br><span class="line">                for(int j=i; j-gap &gt;= 0; j-=gap)&#123;</span><br><span class="line">                    if(array[j-gap].compareTo(array[j]) == 1)&#123;</span><br><span class="line">                        swap(array, j-gap, j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;T&gt;&gt; void bubbleSort(T[] array)&#123;</span><br><span class="line">        for(int i=0; i&lt;array.length;i++)&#123;</span><br><span class="line">            for(int j=0; j&lt;array.length - i - 1;j++)&#123;</span><br><span class="line">                if(array[j].compareTo(array[j+1]) == 1)&#123;</span><br><span class="line">                    swap(array, j, j+1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;T&gt;&gt; void selectSort(T[] array)&#123;</span><br><span class="line">        for(int i=0; i&lt;array.length-1; i++)&#123;</span><br><span class="line">            for(int j=i+1; j&lt;array.length; j++)&#123;</span><br><span class="line">                if(array[i].compareTo(array[j]) == 1)&#123;</span><br><span class="line">                    swap(array, i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T extends Number &amp; Comparable&lt;T&gt;&gt; void insertSort(T[] array)&#123;</span><br><span class="line">        for(int i=0; i&lt;array.length; i++)&#123;</span><br><span class="line">            for(int j=i; j-1&gt;=0; j--)&#123;</span><br><span class="line">                if(array[j-1].compareTo(array[j]) == 1)&#123;</span><br><span class="line">                    swap(array, j-1, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
</search>
